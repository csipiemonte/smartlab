{
  "children": [
    {
      "browserwarnmsg": "Please use Google Chrome, Apple Safari or another supported browser.", 
      "obfuscation": "", 
      "EULA": "", 
      "cached_js": "var client;\nvar topics;\nvar idSensore;\n\n\n", 
      "ChromeAppLaunch": "chrome.app.runtime.onLaunched.addListener(function() {{\n  chrome.app.window.create(\"index.html\", {{\n    \"bounds\": {{\"width\": {appwidth}, \"height\": {appheight} }}\n  }})\n}});", 
      "iconAndroid": "nsb/images/196.png", 
      "expanded_pmp": true, 
      "fontFamily": "helvetica", 
      "ChromeManifest": "{{ \"manifest_version\": 2,\n  \"name\": \"{title}\",\n  \"version\": \"{version}\",\n  \"offline_enabled\": true,\n  \"description\": \"{description}\",\n  \"display_in_launcher\": true,\n  \"display_in_new_tab_page\": true,\n  \"short_name\": \"{title}\",\n  \"icons\": {{ \"16\": \"nsb/images/16.png\",\n            \"128\": \"nsb/images/128.png\" }},\n  \"author\": \"{copyright}\",\n  \"app\": {{\"background\": {{\"scripts\": [\"background.js\"]}}}}}}", 
      "onresize": "", 
      "manifestFile": "appcache", 
      "phoneGapBuildID": "", 
      "firstform": "Form1", 
      "style": "", 
      "FastClick": "true", 
      "cached_js_script_hash": "8493e1bc53111d1cd626618a32c59145", 
      "copyright": "Copyright 2014 Societ\u00e0 ABC", 
      "script": "Dim client\nDim topics\nDim idSensore\n\n\n", 
      "!type": "Page", 
      "id": "SMHost1", 
      "theme": "a", 
      "version": "1.0.0", 
      "rtl": "", 
      "manifestName": "OfflineApp", 
      "children": [
        {
          "fullScreen": "true", 
          "onsubmit": "", 
          "cached_js": " // manage the click on \"Connect\" button\nbtnConnetti.onclick = function() { savethefunction_rvar=\"\";\n   var urlClient;\n // istantiate a STOMP client\n    urlClient = \"ws://stream.smartdatanet.it/ws\";\n    client = Stomp.client(urlClient);\n    client.connect(\"guest\" , \"Aekieh6F\" , connectCallBack, errorCallback);\nreturn savethefunction_rvar; }\n\nbtnDisconnetti.onclick = function() { savethefunction_rvar=\"\";\n // disconnect the server and reset the screen view\n    client.disconnect(disconnectCallback);\n    btnConnetti.disabled = False;\n    btnDisconnetti.disabled = True;\n    cmbSensore.disabled = False;\n    lblLat.Caption = \"0.0\";\n    lblLon.Caption = \"0.0\";\n    lblAlt.Caption = \"0.0\";\n    lblSpeed.Caption = \"0.0\";\n    lblTimestamp.Caption = \"\";\n    GoogleMap1.mapOptions.longitude = 0;\n    GoogleMap1.mapOptions.latitude = 0;\n    GoogleMap1.refresh();\n    txtResult.text = \"\";\nreturn savethefunction_rvar; }\n\n // init the screen view\nForm1.onshow = function() { savethefunction_rvar=\"\";\n    btnConnetti.disabled = False;\n    btnDisconnetti.disabled = True;\n    cmbSensore.disabled = False;\n    cmbSensore.addItem(\"phonegps01\" , \"cc1bfe50-491c-560d-a235-0e4134bbdc23\");\n    cmbSensore.addItem(\"phonegps02\" , \"5391c45d-7350-5f9b-b971-f711e2766123\");\n    lblSensore.Caption = cmbSensore.selectedValue();\n    idSensore = cmbSensore.selectedItem();\n    topics = \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\";\n    txtResult.text = \"\";\n    GoogleMap1.mapOptions.longitude = 0;\n    GoogleMap1.mapOptions.latitude = 0;\n    GoogleMap1.refresh();\n    lblLat.Caption = \"0.0\";\n    lblLon.Caption = \"0.0\";\n    lblAlt.Caption = \"0.0\";\n    lblSpeed.Caption = \"0.0\";\n    lblTimestamp.Caption = \"\";\n\nreturn savethefunction_rvar; }\n\n // manage the topic selection \ncmbSensore.onchange = function() { savethefunction_rvar=\"\";\n    if(cmbSensore.selectedItem() == \"phonegps01\") {\n        topics = \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\";\n    }\n\n    if(cmbSensore.selectedItem() == \"phonegps02\") {\n        topics = \"/topic/output.smartlab.5391c45d-7350-5f9b-b971-f711e2766123_position\";\n    }\n    lblSensore.Caption = cmbSensore.selectedValue();\n    idSensore = cmbSensore.selectedItem();\nreturn savethefunction_rvar; }\n\n // subscribe the topic\nfunction connectCallBack(x) {\n    btnConnetti.disabled = True;\n    btnDisconnetti.disabled = False;\n    cmbSensore.disabled = True;\n    client.subscribe(topics, messageCallback);\n    _msgbox_confirm(\"You are connected and subscribed to topics: \" + topics);\n}\n\n // connection error\nfunction errorCallback(x) {\n  _msgbox_confirm(\"Connection Error\");\n}\n\n // manage the stop message\nfunction messageCallback(x) {\n  var jsText;\n  var obJSON;\n  var latitude;\n  var longitude;\n\n // remove the stomp header\n  jsText =\"\"  +  x;\n  p =  InStr(jsText, \"{\");\n  jsText = Mid(jsText, p);\n\n  txtResult.text = x;\n // convert the JSON to an object\n  obJSON = JSON.parse(jsText);\n\n // show the info on the screen\n  latitude = obJSON.values[0].components.latitude;\n  longitude = obJSON.values[0].components.longitude;\n  GoogleMap1.mapOptions.longitude = longitude;\n  GoogleMap1.mapOptions.latitude = latitude;\n  lblLat.Caption = latitude;\n  lblLon.Caption = longitude;\n  lblAlt.Caption = longitude = obJSON.values[0].components.altitude;\n  lblSpeed.Caption = longitude = obJSON.values[0].components.speed;\n  lblTimestamp.Caption = obJSON.values[0].time;\n  GoogleMap1.refresh();\n  marker = GoogleMap1.setMarker(null);\n\n\n}\n\nfunction disconnectCallback(x) {\n  _msgbox_confirm(\"You are disconnected and logged out\");\n}\n\n\n\n", 
          "onkeypress": "", 
          "_uuid": "d13bfc8252514b5eb1cd22a0dad446d7", 
          "height": 750, 
          "scroll_options": "mouseWheel:true, scrollbars:true, bounce:true, zoom:false", 
          "background": "", 
          "locked": false, 
          "expanded_pmp": true, 
          "scrolling": "false", 
          "id": "Form1", 
          "openMode": "none", 
          "style": "", 
          "cached_js_script_hash": "15c0bcd022e17021ee07d3f43476480b", 
          "language": "BASIC", 
          "onshow": "Form1_onshow()", 
          "script": "' manage the click on \"Connect\" button\nFunction btnConnetti_onclick()\n    Dim urlClient\n    ' istantiate a STOMP client\n    urlClient = \"ws://stream.smartdatanet.it/ws\" \n    client = Stomp.client(urlClient)\n    client.connect(\"guest\", \"Aekieh6F\", connectCallBack, errorCallback)  \nEnd Function\n\nFunction btnDisconnetti_onclick()\n    ' disconnect the server and reset the screen view\n    client.disconnect(disconnectCallback)\n    btnConnetti.disabled = False\n    btnDisconnetti.disabled = True\n    cmbSensore.disabled = False\n    lblLat.Caption = \"0.0\"\n    lblLon.Caption = \"0.0\"\n    lblAlt.Caption = \"0.0\"\n    lblSpeed.Caption = \"0.0\"\n    lblTimestamp.Caption = \"\"\n    GoogleMap1.mapOptions.longitude = 0\n    GoogleMap1.mapOptions.latitude = 0\n    GoogleMap1.refresh()\n    txtResult.text = \"\"\nEnd Function\n\n' init the screen view\nFunction Form1_onshow()\n    btnConnetti.disabled = False\n    btnDisconnetti.disabled = True\n    cmbSensore.disabled = False\n    cmbSensore.addItem(\"phonegps01\", \"cc1bfe50-491c-560d-a235-0e4134bbdc23\")\n    cmbSensore.addItem(\"phonegps02\", \"5391c45d-7350-5f9b-b971-f711e2766123\")\n    lblSensore.Caption = cmbSensore.selectedValue()\n    idSensore = cmbSensore.selectedItem()\n    topics = \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\"\n    txtResult.text = \"\"\n    GoogleMap1.mapOptions.longitude = 0\n    GoogleMap1.mapOptions.latitude = 0\n    GoogleMap1.refresh()\n    lblLat.Caption = \"0.0\"\n    lblLon.Caption = \"0.0\"\n    lblAlt.Caption = \"0.0\"\n    lblSpeed.Caption = \"0.0\"\n    lblTimestamp.Caption = \"\"\n    \nEnd Function\n\n' manage the topic selection \nFunction cmbSensore_onchange()\n    If cmbSensore.selectedItem() = \"phonegps01\" Then\n        topics = \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\"\n    End If\n  \n    If cmbSensore.selectedItem() = \"phonegps02\" Then\n        topics = \"/topic/output.smartlab.5391c45d-7350-5f9b-b971-f711e2766123_position\"\n    End If\n    lblSensore.Caption = cmbSensore.selectedValue()\n    idSensore = cmbSensore.selectedItem()\nEnd Function\n\n' subscribe the topic\nSub connectCallBack(x)\n    btnConnetti.disabled = True\n    btnDisconnetti.disabled = False\n    cmbSensore.disabled = True\n    client.subscribe(topics, messageCallback)\n    MsgBox(\"You are connected and subscribed to topics: \" + topics)\nEnd Sub\n\n' connection error\nSub errorCallback(x)\n  MsgBox(\"Connection Error\")\nEnd Sub\n\n' manage the stop message\nSub messageCallback(x)\n  var jsText\n  var obJSON\n  var latitude\n  var longitude\n  \n  ' remove the stomp header\n  jsText =\"\" & x\n  p =  InStr(jsText, \"{\")\n  jsText = Mid(jsText, p)\n  \n  txtResult.text = x\n  ' convert the JSON to an object\n  obJSON = JSON.parse(jsText)\n  \n  ' show the info on the screen\n  latitude = obJSON.values[0].components.latitude\n  longitude = obJSON.values[0].components.longitude\n  GoogleMap1.mapOptions.longitude = longitude\n  GoogleMap1.mapOptions.latitude = latitude\n  lblLat.Caption = latitude\n  lblLon.Caption = longitude\n  lblAlt.Caption = longitude = obJSON.values[0].components.altitude\n  lblSpeed.Caption = longitude = obJSON.values[0].components.speed\n  lblTimestamp.Caption = obJSON.values[0].time\n  GoogleMap1.refresh()\n  marker = GoogleMap1.setMarker(null)\n\n  \nEnd Sub\n\nSub disconnectCallback(x)\n  MsgBox(\"You are disconnected and logged out\")\nEnd Sub\n\n\n\n", 
          "top": 0, 
          "!type": "Form", 
          "onhide": "", 
          "children": [
            {
              "right": "10", 
              "cached_js": "", 
              "class": "", 
              "_uuid": "ff4c587af70c4302aca996920047bb56", 
              "height": 652, 
              "id": "Line1", 
              "borderColor": "gray", 
              "borderStyle": "solid", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 5, 
              "script": "", 
              "!type": "Line", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 965, 
              "borderWidth": 1, 
              "backgroundColor": "grigio", 
              "hidden": "", 
              "align": "", 
              "left": 9
            }, 
            {
              "mini": "ui-mini", 
              "right": "auto", 
              "cached_js": "", 
              "groupBegin": "", 
              "color": "", 
              "image": "", 
              "height": "auto", 
              "disabled": "", 
              "fontFamily": "", 
              "onchange": "", 
              "children": [], 
              "borderColor": "", 
              "ChangeForm": "", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "top": 73, 
              "!type": "Button_jqm14", 
              "id": "btnConnetti", 
              "width": 100, 
              "theme": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "fontSize": "", 
              "hidden": "", 
              "icon": "", 
              "onclick": "Connetti_onclick()", 
              "onmouseout": "", 
              "class": "", 
              "_uuid": "7d8c9dd7ddb841d59c6566065443dc85", 
              "padding": "", 
              "fontWeight": "", 
              "onmousedown": "", 
              "onfocus": "", 
              "backgroundColor": "", 
              "ontouchend": "", 
              "fontStyle": "", 
              "name": "", 
              "ontouchmove": "", 
              "corners": "", 
              "bottom": "auto", 
              "expanded_pmp": true, 
              "value": "Connect", 
              "iconPos": "none", 
              "groupEnd": "", 
              "ontouchstart": "", 
              "left": 31
            }, 
            {
              "mini": "ui-mini", 
              "right": "auto", 
              "cached_js": "", 
              "color": "", 
              "height": 447, 
              "disabled": "", 
              "fontFamily": "helvetica", 
              "autocapitalize": "on", 
              "onchange": "", 
              "children": [], 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "autocorrect": "on", 
              "!type": "Textarea_jqm14", 
              "readonly": "", 
              "id": "txtResult", 
              "width": 422, 
              "theme": "", 
              "onselect": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "fontSize": "12", 
              "hidden": "block", 
              "onblur": "", 
              "onclick": "", 
              "onmouseout": "", 
              "onkeypress": "", 
              "class": "", 
              "_uuid": "fa3516872a0d4486b646fcc302ab056c", 
              "required": "", 
              "fontWeight": "", 
              "autogrow": "data-autogrow=false", 
              "heightMax": "auto", 
              "onmousedown": "", 
              "placeholder": "Inserisci il testo qui", 
              "onfocus": "", 
              "backgroundColor": "", 
              "ontouchend": "", 
              "fontStyle": "", 
              "name": "", 
              "ontouchmove": "", 
              "align": "left", 
              "bottom": "auto", 
              "expanded_pmp": true, 
              "value": "", 
              "autocomplete": "on", 
              "onkeyup": "", 
              "ontouchstart": "", 
              "top": 200, 
              "left": 22
            }, 
            {
              "mini": "ui-mini", 
              "right": "auto", 
              "cached_js": "", 
              "groupBegin": "", 
              "color": "", 
              "image": "", 
              "height": "auto", 
              "disabled": "", 
              "fontFamily": "", 
              "onchange": "", 
              "children": [], 
              "borderColor": "", 
              "ChangeForm": "", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "top": 73, 
              "!type": "Button_jqm14", 
              "id": "btnDisconnetti", 
              "width": 100, 
              "theme": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "fontSize": "", 
              "hidden": "", 
              "icon": "", 
              "onclick": "btnDisconnetti_onclick()", 
              "onmouseout": "", 
              "class": "", 
              "_uuid": "d67edbda51da44868fe49c6f35dd416c", 
              "padding": "", 
              "fontWeight": "", 
              "onmousedown": "", 
              "onfocus": "", 
              "backgroundColor": "", 
              "ontouchend": "", 
              "fontStyle": "", 
              "name": "", 
              "ontouchmove": "", 
              "corners": "", 
              "bottom": "auto", 
              "expanded_pmp": true, 
              "value": "Logout", 
              "iconPos": "none", 
              "groupEnd": "", 
              "ontouchstart": "", 
              "left": 140
            }, 
            {
              "cached_js": "", 
              "right": "auto", 
              "disableDefaultUI": true, 
              "height": "450", 
              "noClear": false, 
              "disableDoubleClickZoom": true, 
              "expanded_pmp": true, 
              "draggableCursor": "", 
              "children": [], 
              "draggingCursor": "", 
              "mapTypeId": "roadmap", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "tilt": 0, 
              "top": 75, 
              "scrollwheel": false, 
              "!type": "GoogleMap", 
              "id": "GoogleMap1", 
              "width": "480", 
              "minZoom": 0, 
              "onmousemove": "", 
              "onmouseup": "", 
              "latitude": 40.948262, 
              "onclick": "", 
              "onmouseout": "", 
              "_uuid": "0b8e2b60458442b49e39fb42251a2b66", 
              "mapMaker": true, 
              "background": "#F0FFFF", 
              "streetViewControl": false, 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "ontouchmove": "", 
              "bottom": "auto", 
              "zoom": 16, 
              "longitude": -72.898428, 
              "zoomControl": false, 
              "draggable": false, 
              "maxZoom": 20, 
              "keyboardShortcuts": true, 
              "ontouchstart": "", 
              "heading": 0, 
              "left": 473
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Sensor:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label1", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 127, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "482b55b8663c498b994f597afe037eae", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 62
            }, 
            {
              "mini": "data-mini=true", 
              "right": "auto", 
              "cached_js": "", 
              "height": "auto", 
              "disabled": "", 
              "multiSelect": "", 
              "onchange": "cmbSensore_onchange()", 
              "id": "cmbSensore", 
              "nativeMenu": "true", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 125, 
              "!type": "Select_jqm14", 
              "children": [], 
              "width": 308, 
              "theme": "", 
              "onmousemove": "", 
              "onclick": "", 
              "onfocus": "", 
              "onmouseup": "", 
              "onmouseout": "", 
              "_uuid": "f9557bf87b764bb896dbc02d321bf26b", 
              "selectedIndex": 1, 
              "group": "", 
              "onmousedown": "", 
              "placeholder": 0, 
              "class": "", 
              "icon": "arrow-d", 
              "ontouchend": "", 
              "name": "", 
              "ontouchmove": "", 
              "items": "", 
              "align": "", 
              "title": "Combo Box", 
              "expanded_pmp": true, 
              "iconPos": "right", 
              "script": "", 
              "values": "1,2", 
              "inline": "false", 
              "overlayTheme": "a", 
              "ontouchstart": "", 
              "left": 139
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Label", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "lblSensore", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 166, 
              "!type": "Label", 
              "children": [], 
              "width": 306, 
              "fontSize": 14, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "94e6e4c889334cd3b922137fbadf4c93", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 139
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Smart Trek Visualizer", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label2", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 15, 
              "!type": "Label", 
              "children": [], 
              "width": 312, 
              "fontSize": 30, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "07bb98a8c3ef4c5d9f38cb0332d3d985", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 362
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onmouseout": "", 
              "onclick": "", 
              "class": "", 
              "_uuid": "be3bad8f3bec454bb6db88987e1f6f39", 
              "height": 44, 
              "onmousedown": "", 
              "id": "Image1", 
              "src": "img/logosdp.jpg", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "ontouchend": "", 
              "bottom": "auto", 
              "ontouchmove": "", 
              "top": 10, 
              "script": "", 
              "!type": "Image", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 203, 
              "onmousemove": "", 
              "onmouseup": "", 
              "hidden": "", 
              "ontouchstart": "", 
              "left": 24
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Latitude:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label3", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 539, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "02bb90c7db1f451ebd4139b2c3caf748", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 473
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onmouseout": "", 
              "onclick": "", 
              "class": "", 
              "_uuid": "0479f57812ab470889f8dc0085d5593a", 
              "height": 39, 
              "onmousedown": "", 
              "id": "Image2", 
              "src": "img/logoCSI.png", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "ontouchend": "", 
              "bottom": "auto", 
              "ontouchmove": "", 
              "top": 14, 
              "script": "", 
              "!type": "Image", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 83, 
              "onmousemove": "", 
              "onmouseup": "", 
              "hidden": "", 
              "ontouchstart": "", 
              "left": 879
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Longitude:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label4", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 539, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "50b5f0c39fc34c8687ffbbb9ce4b157b", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 603
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Altitude:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label5", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 539, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "02e56911c2df4664853ce546daf3dd90", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 753
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Speed:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label6", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 539, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "45fc9d868b154ae7b4d07d8143c51910", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 884
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "green", 
              "text": "xxx", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "lblLat", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 569, 
              "!type": "Label", 
              "children": [], 
              "width": 124, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "4aa679f3c92b4c0d8be048069bc5f74c", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 474
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "green", 
              "text": "xxx", 
              "height": 22, 
              "fontFamily": "helvetica", 
              "id": "lblLon", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 569, 
              "!type": "Label", 
              "children": [], 
              "width": 144, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "4aa679f3c92b4c0d8be048069bc5f74c", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 603
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "green", 
              "text": "xxx", 
              "height": 22, 
              "fontFamily": "helvetica", 
              "id": "lblAlt", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 569, 
              "!type": "Label", 
              "children": [], 
              "width": 118, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "4aa679f3c92b4c0d8be048069bc5f74c", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 753
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "green", 
              "text": "xxx", 
              "height": 22, 
              "fontFamily": "helvetica", 
              "id": "lblSpeed", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 569, 
              "!type": "Label", 
              "children": [], 
              "width": 77, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "4aa679f3c92b4c0d8be048069bc5f74c", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 885
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Timestamp:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label7", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 613, 
              "!type": "Label", 
              "children": [], 
              "width": 97, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "8bb8ba0582d347d0ab77659b426faefb", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 470
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "green", 
              "text": "xxx", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "lblTimestamp", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 613, 
              "!type": "Label", 
              "children": [], 
              "width": 283, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "4aa679f3c92b4c0d8be048069bc5f74c", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 581
            }
          ], 
          "width": 980, 
          "action": "", 
          "setFocusID": "", 
          "method": "GET", 
          "left": 0
        }, 
        {
          "src": "js/stomp.js", 
          "cached_js_script_hash": "cb892bf0895e0f3703bad5db0745a889", 
          "cached_js": "// Generated by CoffeeScript 1.3.3\r\n(function() {\r\n  var Byte, Client, Frame, Stomp,\r\n    __hasProp = {}.hasOwnProperty;\r\n  \r\n  var MAX_FRAME_SIZE=16*1024;;\r\n  \r\n  Byte = {\r\n    LF: '\\x0A',\r\n    NULL: '\\x00'\r\n  };\r\n\r\n  Frame = (function() {\r\n\r\n    function Frame(command, headers, body) {\r\n      this.command = command;\r\n      this.headers = headers != null ? headers : {};\r\n      this.body = body != null ? body : '';\r\n    }\r\n\r\n    Frame.prototype.toString = function() {\r\n      var lines, name, value, _ref;\r\n      lines = [this.command];\r\n      _ref = this.headers;\r\n      for (name in _ref) {\r\n        if (!__hasProp.call(_ref, name)) continue;\r\n        value = _ref[name];\r\n        lines.push(\"\" + name + \":\" + value);\r\n      }\r\n      if (this.body) {\r\n        lines.push(\"content-length:\" + ('' + this.body).length);\r\n      }\r\n      lines.push(Byte.LF + this.body);\r\n      return lines.join(Byte.LF);\r\n    };\r\n\r\n    Frame._unmarshallSingle = function(data) {\r\n      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _ref, _ref1;\r\n      divider = data.search(RegExp(\"\" + Byte.LF + Byte.LF));\r\n      headerLines = data.substring(0, divider).split(Byte.LF);\r\n      command = headerLines.shift();\r\n      headers = {};\r\n      trim = function(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, '');\r\n      };\r\n      line = idx = null;\r\n      for (i = _i = 0, _ref = headerLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n        line = headerLines[i];\r\n        idx = line.indexOf(':');\r\n        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\r\n      }\r\n      body = '';\r\n      start = divider + 2;\r\n      if (headers['content-length']) {\r\n        len = parseInt(headers['content-length']);\r\n        body = ('' + data).substring(start, start + len);\r\n      } else {\r\n        chr = null;\r\n        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {\r\n          chr = data.charAt(i);\r\n          if (chr === Byte.NULL) {\r\n            break;\r\n          }\r\n          body += chr;\r\n        }\r\n      }\r\n      return new Frame(command, headers, body);\r\n    };\r\n\r\n    Frame.unmarshall = function(datas) {\r\n      var data;\r\n      return (function() {\r\n        var _i, _len, _ref, _results;\r\n        _ref = datas.split(RegExp(\"\" + Byte.NULL + Byte.LF + \"*\"));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          data = _ref[_i];\r\n          if ((data != null ? data.length : void 0) > 0) {\r\n            _results.push(Frame._unmarshallSingle(data));\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n    };\r\n\r\n    Frame.marshall = function(command, headers, body) {\r\n      var frame;\r\n      frame = new Frame(command, headers, body);\r\n      return frame.toString() + Byte.NULL;\r\n    };\r\n\r\n    return Frame;\r\n\r\n  })();\r\n\r\n  Client = (function() {\r\n\r\n    function Client(ws) {\r\n      this.ws = ws;\r\n      this.ws.binaryType = \"arraybuffer\";\r\n      this.counter = 0;\r\n      this.connected = false;\r\n      this.heartbeat = {\r\n        outgoing: 10000,\r\n        incoming: 10000\r\n      };\r\n      this.subscriptions = {};\r\n    }\r\n\r\n    Client.prototype._transmit = function(command, headers, body) {\r\n      var out;\r\n      out = Frame.marshall(command, headers, body);\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\">>> \" + out);\r\n      }\r\n      while( true) {\r\n        if( out.length > MAX_FRAME_SIZE ) {\r\n          this.ws.send(out.substring(0, MAX_FRAME_SIZE));\r\n          out = out.substring(MAX_FRAME_SIZE);\r\n        } else {\r\n          return this.ws.send(out);\r\n        }\r\n      }\r\n    };\r\n\r\n    Client.prototype._setupHeartbeat = function(headers) {\r\n      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1,\r\n        _this = this;\r\n      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {\r\n        return;\r\n      }\r\n      _ref1 = (function() {\r\n        var _i, _len, _ref1, _results;\r\n        _ref1 = headers['heart-beat'].split(\",\");\r\n        _results = [];\r\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n          v = _ref1[_i];\r\n          _results.push(parseInt(v));\r\n        }\r\n        return _results;\r\n      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];\r\n      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\r\n        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"send PING every \" + ttl + \"ms\");\r\n        }\r\n        this.pinger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          _this.ws.send(Byte.LF);\r\n          return typeof _this.debug === \"function\" ? _this.debug(\">>> PING\") : void 0;\r\n        }, ttl) : void 0;\r\n      }\r\n      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\r\n        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"check PONG every \" + ttl + \"ms\");\r\n        }\r\n        return this.ponger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          var delta;\r\n          delta = Date.now() - _this.serverActivity;\r\n          if (delta > ttl * 2) {\r\n            if (typeof _this.debug === \"function\") {\r\n              _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\r\n            }\r\n            return _this._cleanUp();\r\n          }\r\n        }, ttl) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {\r\n      var _this = this;\r\n      this.connectCallback = connectCallback;\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\"Opening Web Socket...\");\r\n      }\r\n      this.ws.onmessage = function(evt) {\r\n        var arr, c, data, frame, onreceive, _i, _len, _ref, _results;\r\n        data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === \"function\" ? _this.debug(\"--- got data length: \" + arr.length) : void 0, ((function() {\r\n          var _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n            c = arr[_i];\r\n            _results.push(String.fromCharCode(c));\r\n          }\r\n          return _results;\r\n        })()).join('')) : evt.data;\r\n        _this.serverActivity = Date.now();\r\n        if (data === Byte.LF) {\r\n          if (typeof _this.debug === \"function\") {\r\n            _this.debug(\"<<< PONG\");\r\n          }\r\n          return;\r\n        }\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(\"<<< \" + data);\r\n        }\r\n        _ref = Frame.unmarshall(data);\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          frame = _ref[_i];\r\n          switch (frame.command) {\r\n            case \"CONNECTED\":\r\n              if (typeof _this.debug === \"function\") {\r\n                _this.debug(\"connected to server \" + frame.headers.server);\r\n              }\r\n              _this.connected = true;\r\n              _this._setupHeartbeat(frame.headers);\r\n              _results.push(typeof _this.connectCallback === \"function\" ? _this.connectCallback(frame) : void 0);\r\n              break;\r\n            case \"MESSAGE\":\r\n              onreceive = _this.subscriptions[frame.headers.subscription];\r\n              _results.push(typeof onreceive === \"function\" ? onreceive(frame) : void 0);\r\n              break;\r\n            case \"RECEIPT\":\r\n              _results.push(typeof _this.onreceipt === \"function\" ? _this.onreceipt(frame) : void 0);\r\n              break;\r\n            case \"ERROR\":\r\n              _results.push(typeof errorCallback === \"function\" ? errorCallback(frame) : void 0);\r\n              break;\r\n            default:\r\n              _results.push(typeof _this.debug === \"function\" ? _this.debug(\"Unhandled frame: \" + frame) : void 0);\r\n          }\r\n        }\r\n        return _results;\r\n      };\r\n      this.ws.onclose = function() {\r\n        var msg;\r\n        msg = \"Whoops! Lost connection to \" + _this.ws.url;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(msg);\r\n        }\r\n        return typeof errorCallback === \"function\" ? errorCallback(msg) : void 0;\r\n      };\r\n      return this.ws.onopen = function() {\r\n        var headers;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug('Web Socket Opened...');\r\n        }\r\n        headers = {\r\n          \"accept-version\": Stomp.VERSIONS.supportedVersions(),\r\n          \"heart-beat\": [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',')\r\n        };\r\n        if (vhost) {\r\n          headers.host = vhost;\r\n        }\r\n        if (login) {\r\n          headers.login = login;\r\n        }\r\n        if (passcode) {\r\n          headers.passcode = passcode;\r\n        }\r\n        return _this._transmit(\"CONNECT\", headers);\r\n      };\r\n    };\r\n\r\n    Client.prototype.disconnect = function(disconnectCallback) {\r\n      this._transmit(\"DISCONNECT\");\r\n      this.ws.onclose = null;\r\n      this._cleanUp();\r\n      return typeof disconnectCallback === \"function\" ? disconnectCallback() : void 0;\r\n    };\r\n\r\n    Client.prototype._cleanUp = function() {\r\n      this.ws.close();\r\n      this.connected = false;\r\n      if (this.pinger) {\r\n        if (typeof window !== \"undefined\" && window !== null) {\r\n          window.clearInterval(this.pinger);\r\n        }\r\n      }\r\n      if (this.ponger) {\r\n        return typeof window !== \"undefined\" && window !== null ? window.clearInterval(this.ponger) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.send = function(destination, headers, body) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (body == null) {\r\n        body = '';\r\n      }\r\n      headers.destination = destination;\r\n      return this._transmit(\"SEND\", headers, body);\r\n    };\r\n\r\n    Client.prototype.subscribe = function(destination, callback, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (!headers.id) {\r\n        headers.id = \"sub-\" + this.counter++;\r\n      }\r\n      headers.destination = destination;\r\n      this.subscriptions[headers.id] = callback;\r\n      this._transmit(\"SUBSCRIBE\", headers);\r\n      return headers.id;\r\n    };\r\n\r\n    Client.prototype.unsubscribe = function(id) {\r\n      delete this.subscriptions[id];\r\n      return this._transmit(\"UNSUBSCRIBE\", {\r\n        id: id\r\n      });\r\n    };\r\n\r\n    Client.prototype.begin = function(transaction) {\r\n      return this._transmit(\"BEGIN\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.commit = function(transaction) {\r\n      return this._transmit(\"COMMIT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.abort = function(transaction) {\r\n      return this._transmit(\"ABORT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.ack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"ACK\", headers);\r\n    };\r\n\r\n    Client.prototype.nack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"NACK\", headers);\r\n    };\r\n\r\n    return Client;\r\n\r\n  })();\r\n\r\n  Stomp = {\r\n    libVersion: \"2.0.0-next\",\r\n    VERSIONS: {\r\n      V1_0: '1.0',\r\n      V1_1: '1.1',\r\n      V1_2: '1.2',\r\n      supportedVersions: function() {\r\n        return '1.1,1.0';\r\n      }\r\n    },\r\n    client: function(url, protocols) {\r\n      var klass, ws;\r\n      if (protocols == null) {\r\n        protocols = ['v10.stomp', 'v11.stomp'];\r\n      }\r\n      klass = Stomp.WebSocketClass || WebSocket;\r\n      ws = new klass(url, protocols);\r\n      return new Client(ws);\r\n    },\r\n    over: function(ws) {\r\n      return new Client(ws);\r\n    },\r\n    Frame: Frame\r\n  };\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    window.Stomp = Stomp;\r\n  } else {\r\n    exports.Stomp = Stomp;\r\n    Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;\r\n  }\r\n\r\n}).call(this);", 
          "language": "JavaScript", 
          "script": "// Generated by CoffeeScript 1.3.3\r\n(function() {\r\n  var Byte, Client, Frame, Stomp,\r\n    __hasProp = {}.hasOwnProperty;\r\n  \r\n  var MAX_FRAME_SIZE=16*1024;;\r\n  \r\n  Byte = {\r\n    LF: '\\x0A',\r\n    NULL: '\\x00'\r\n  };\r\n\r\n  Frame = (function() {\r\n\r\n    function Frame(command, headers, body) {\r\n      this.command = command;\r\n      this.headers = headers != null ? headers : {};\r\n      this.body = body != null ? body : '';\r\n    }\r\n\r\n    Frame.prototype.toString = function() {\r\n      var lines, name, value, _ref;\r\n      lines = [this.command];\r\n      _ref = this.headers;\r\n      for (name in _ref) {\r\n        if (!__hasProp.call(_ref, name)) continue;\r\n        value = _ref[name];\r\n        lines.push(\"\" + name + \":\" + value);\r\n      }\r\n      if (this.body) {\r\n        lines.push(\"content-length:\" + ('' + this.body).length);\r\n      }\r\n      lines.push(Byte.LF + this.body);\r\n      return lines.join(Byte.LF);\r\n    };\r\n\r\n    Frame._unmarshallSingle = function(data) {\r\n      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _ref, _ref1;\r\n      divider = data.search(RegExp(\"\" + Byte.LF + Byte.LF));\r\n      headerLines = data.substring(0, divider).split(Byte.LF);\r\n      command = headerLines.shift();\r\n      headers = {};\r\n      trim = function(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, '');\r\n      };\r\n      line = idx = null;\r\n      for (i = _i = 0, _ref = headerLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n        line = headerLines[i];\r\n        idx = line.indexOf(':');\r\n        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\r\n      }\r\n      body = '';\r\n      start = divider + 2;\r\n      if (headers['content-length']) {\r\n        len = parseInt(headers['content-length']);\r\n        body = ('' + data).substring(start, start + len);\r\n      } else {\r\n        chr = null;\r\n        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {\r\n          chr = data.charAt(i);\r\n          if (chr === Byte.NULL) {\r\n            break;\r\n          }\r\n          body += chr;\r\n        }\r\n      }\r\n      return new Frame(command, headers, body);\r\n    };\r\n\r\n    Frame.unmarshall = function(datas) {\r\n      var data;\r\n      return (function() {\r\n        var _i, _len, _ref, _results;\r\n        _ref = datas.split(RegExp(\"\" + Byte.NULL + Byte.LF + \"*\"));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          data = _ref[_i];\r\n          if ((data != null ? data.length : void 0) > 0) {\r\n            _results.push(Frame._unmarshallSingle(data));\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n    };\r\n\r\n    Frame.marshall = function(command, headers, body) {\r\n      var frame;\r\n      frame = new Frame(command, headers, body);\r\n      return frame.toString() + Byte.NULL;\r\n    };\r\n\r\n    return Frame;\r\n\r\n  })();\r\n\r\n  Client = (function() {\r\n\r\n    function Client(ws) {\r\n      this.ws = ws;\r\n      this.ws.binaryType = \"arraybuffer\";\r\n      this.counter = 0;\r\n      this.connected = false;\r\n      this.heartbeat = {\r\n        outgoing: 10000,\r\n        incoming: 10000\r\n      };\r\n      this.subscriptions = {};\r\n    }\r\n\r\n    Client.prototype._transmit = function(command, headers, body) {\r\n      var out;\r\n      out = Frame.marshall(command, headers, body);\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\">>> \" + out);\r\n      }\r\n      while( true) {\r\n        if( out.length > MAX_FRAME_SIZE ) {\r\n          this.ws.send(out.substring(0, MAX_FRAME_SIZE));\r\n          out = out.substring(MAX_FRAME_SIZE);\r\n        } else {\r\n          return this.ws.send(out);\r\n        }\r\n      }\r\n    };\r\n\r\n    Client.prototype._setupHeartbeat = function(headers) {\r\n      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1,\r\n        _this = this;\r\n      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {\r\n        return;\r\n      }\r\n      _ref1 = (function() {\r\n        var _i, _len, _ref1, _results;\r\n        _ref1 = headers['heart-beat'].split(\",\");\r\n        _results = [];\r\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n          v = _ref1[_i];\r\n          _results.push(parseInt(v));\r\n        }\r\n        return _results;\r\n      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];\r\n      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\r\n        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"send PING every \" + ttl + \"ms\");\r\n        }\r\n        this.pinger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          _this.ws.send(Byte.LF);\r\n          return typeof _this.debug === \"function\" ? _this.debug(\">>> PING\") : void 0;\r\n        }, ttl) : void 0;\r\n      }\r\n      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\r\n        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"check PONG every \" + ttl + \"ms\");\r\n        }\r\n        return this.ponger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          var delta;\r\n          delta = Date.now() - _this.serverActivity;\r\n          if (delta > ttl * 2) {\r\n            if (typeof _this.debug === \"function\") {\r\n              _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\r\n            }\r\n            return _this._cleanUp();\r\n          }\r\n        }, ttl) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {\r\n      var _this = this;\r\n      this.connectCallback = connectCallback;\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\"Opening Web Socket...\");\r\n      }\r\n      this.ws.onmessage = function(evt) {\r\n        var arr, c, data, frame, onreceive, _i, _len, _ref, _results;\r\n        data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === \"function\" ? _this.debug(\"--- got data length: \" + arr.length) : void 0, ((function() {\r\n          var _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n            c = arr[_i];\r\n            _results.push(String.fromCharCode(c));\r\n          }\r\n          return _results;\r\n        })()).join('')) : evt.data;\r\n        _this.serverActivity = Date.now();\r\n        if (data === Byte.LF) {\r\n          if (typeof _this.debug === \"function\") {\r\n            _this.debug(\"<<< PONG\");\r\n          }\r\n          return;\r\n        }\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(\"<<< \" + data);\r\n        }\r\n        _ref = Frame.unmarshall(data);\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          frame = _ref[_i];\r\n          switch (frame.command) {\r\n            case \"CONNECTED\":\r\n              if (typeof _this.debug === \"function\") {\r\n                _this.debug(\"connected to server \" + frame.headers.server);\r\n              }\r\n              _this.connected = true;\r\n              _this._setupHeartbeat(frame.headers);\r\n              _results.push(typeof _this.connectCallback === \"function\" ? _this.connectCallback(frame) : void 0);\r\n              break;\r\n            case \"MESSAGE\":\r\n              onreceive = _this.subscriptions[frame.headers.subscription];\r\n              _results.push(typeof onreceive === \"function\" ? onreceive(frame) : void 0);\r\n              break;\r\n            case \"RECEIPT\":\r\n              _results.push(typeof _this.onreceipt === \"function\" ? _this.onreceipt(frame) : void 0);\r\n              break;\r\n            case \"ERROR\":\r\n              _results.push(typeof errorCallback === \"function\" ? errorCallback(frame) : void 0);\r\n              break;\r\n            default:\r\n              _results.push(typeof _this.debug === \"function\" ? _this.debug(\"Unhandled frame: \" + frame) : void 0);\r\n          }\r\n        }\r\n        return _results;\r\n      };\r\n      this.ws.onclose = function() {\r\n        var msg;\r\n        msg = \"Whoops! Lost connection to \" + _this.ws.url;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(msg);\r\n        }\r\n        return typeof errorCallback === \"function\" ? errorCallback(msg) : void 0;\r\n      };\r\n      return this.ws.onopen = function() {\r\n        var headers;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug('Web Socket Opened...');\r\n        }\r\n        headers = {\r\n          \"accept-version\": Stomp.VERSIONS.supportedVersions(),\r\n          \"heart-beat\": [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',')\r\n        };\r\n        if (vhost) {\r\n          headers.host = vhost;\r\n        }\r\n        if (login) {\r\n          headers.login = login;\r\n        }\r\n        if (passcode) {\r\n          headers.passcode = passcode;\r\n        }\r\n        return _this._transmit(\"CONNECT\", headers);\r\n      };\r\n    };\r\n\r\n    Client.prototype.disconnect = function(disconnectCallback) {\r\n      this._transmit(\"DISCONNECT\");\r\n      this.ws.onclose = null;\r\n      this._cleanUp();\r\n      return typeof disconnectCallback === \"function\" ? disconnectCallback() : void 0;\r\n    };\r\n\r\n    Client.prototype._cleanUp = function() {\r\n      this.ws.close();\r\n      this.connected = false;\r\n      if (this.pinger) {\r\n        if (typeof window !== \"undefined\" && window !== null) {\r\n          window.clearInterval(this.pinger);\r\n        }\r\n      }\r\n      if (this.ponger) {\r\n        return typeof window !== \"undefined\" && window !== null ? window.clearInterval(this.ponger) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.send = function(destination, headers, body) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (body == null) {\r\n        body = '';\r\n      }\r\n      headers.destination = destination;\r\n      return this._transmit(\"SEND\", headers, body);\r\n    };\r\n\r\n    Client.prototype.subscribe = function(destination, callback, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (!headers.id) {\r\n        headers.id = \"sub-\" + this.counter++;\r\n      }\r\n      headers.destination = destination;\r\n      this.subscriptions[headers.id] = callback;\r\n      this._transmit(\"SUBSCRIBE\", headers);\r\n      return headers.id;\r\n    };\r\n\r\n    Client.prototype.unsubscribe = function(id) {\r\n      delete this.subscriptions[id];\r\n      return this._transmit(\"UNSUBSCRIBE\", {\r\n        id: id\r\n      });\r\n    };\r\n\r\n    Client.prototype.begin = function(transaction) {\r\n      return this._transmit(\"BEGIN\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.commit = function(transaction) {\r\n      return this._transmit(\"COMMIT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.abort = function(transaction) {\r\n      return this._transmit(\"ABORT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.ack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"ACK\", headers);\r\n    };\r\n\r\n    Client.prototype.nack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"NACK\", headers);\r\n    };\r\n\r\n    return Client;\r\n\r\n  })();\r\n\r\n  Stomp = {\r\n    libVersion: \"2.0.0-next\",\r\n    VERSIONS: {\r\n      V1_0: '1.0',\r\n      V1_1: '1.1',\r\n      V1_2: '1.2',\r\n      supportedVersions: function() {\r\n        return '1.1,1.0';\r\n      }\r\n    },\r\n    client: function(url, protocols) {\r\n      var klass, ws;\r\n      if (protocols == null) {\r\n        protocols = ['v10.stomp', 'v11.stomp'];\r\n      }\r\n      klass = Stomp.WebSocketClass || WebSocket;\r\n      ws = new klass(url, protocols);\r\n      return new Client(ws);\r\n    },\r\n    over: function(ws) {\r\n      return new Client(ws);\r\n    },\r\n    Frame: Frame\r\n  };\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    window.Stomp = Stomp;\r\n  } else {\r\n    exports.Stomp = Stomp;\r\n    Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;\r\n  }\r\n\r\n}).call(this);", 
          "_uuid": "3d5f175b1bb84a84b8d1bf52630b7162", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "stomp.js", 
          "children": []
        }, 
        {
          "src": "img/logoCSI.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "620652be945e40f3afec4e9674d276c0", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "logoCSI.png", 
          "children": []
        }, 
        {
          "src": "img/logosdp.jpg", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "3c8b487fd66a43048e8f6f2491cd7f70", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "logosdp.jpg", 
          "children": []
        }
      ], 
      "description": "", 
      "extraheaders": "", 
      "onvisibilitychange": "", 
      "_uuid": "e6905da4c4c54b679f126ee10311b746", 
      "backgroundimage": "", 
      "ondeviceorientation": "", 
      "icon": "nsb/images/LauncherIcon57.png", 
      "homescreenTitle": "", 
      "language": "BASIC", 
      "configxml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<widget \nxmlns = \"http://www.w3.org/ns/widgets\"\nxmlns:gap = \"http://phonegap.com/ns/1.0\"\nid = \"com.nsbasic.{id}\"\nversion = \"{version}\">\n\n<name>{title}</name>\n<description>{description}</description>\n<preference name=\"phonegap-version\" value=\"3.4.0\" />\n\n<!--\n<preference name=\"SplashScreenDelay\" value=\"2000\" />\n<gap:splash src=\"{splashscreen}\"/>\n<gap:splash src='splash/ios/Default.png' gap:platform='ios' width='320' height='480' />\n<gap:splash src='splash/ios/Default@2x.png' gap:platform='ios' width='640' height='960' />\n<gap:splash src='splash/ios/Default-568h@2x.png' gap:platform='ios' width='640' height='1136'\n<gap:splash src='splash/ios/Default-Portrait.png' gap:platform='ios' width='768' height='1024' />\n<gap:splash src='splash/ios/Default-Landscape.png' gap:platform='ios' width='1024' height='768' />\n<gap:splash src='splash/ios/Default-Portrait@2x.png' gap:platform='ios' width='1536' height='2048' />\n<gap:splash src='splash/ios/Default-Landscape@2x.png' gap:platform='ios' width='2048' height='1536' />\n-->\n<!-- Icons: Expand this section with sizes required for platforms you are targeting.-->\n<icon src=\"{icon}\" />\n<!--\n<icon src=\"icons/ios/icon.png\" gap:platform=\"ios\" width=\"57\" height=\"57\" />\n<icon src=\"icons/ios/icon-72.png\" gap:platform=\"ios\" width=\"72\" height=\"72\" />\n<icon src=\"icons/ios/icon_at_2x.png\" gap:platform=\"ios\" width=\"114\" height=\"114\" />\n<icon src=\"icons/ios/icon-72_at_2x.png\" gap:platform=\"ios\" width=\"144\" height=\"144\" />\n<icon src=\"icons/android/ldpi.png\" gap:platform=\"android\" gap:density=\"ldpi\" />\n<icon src=\"icons/android/mdpi.png\" gap:platform=\"android\" gap:density=\"mdpi\" />\n<icon src=\"icons/android/hdpi.png\" gap:platform=\"android\" gap:density=\"hdpi\" />\n<icon src=\"icons/android/xhdpi.png\" gap:platform=\"android\" gap:density=\"xhdpi\" />\n-->\n\n<!-- sample feature specification -->\n<!-- <feature name=\"http://api.phonegap.com/1.0/network\"/> -->\n\n<preference name=\"permissions\" value=\"none\"/>\n<!-- sample preference specifications -->\n<!-- <preference name=\"autorotate\" value=\"false\" readonly=\"true\"/> -->\n<!-- <preference name=\"orientation\" value=\"default\" /> -->\n<!-- <preference name=\"fullscreen\" value=\"true\" /> -->\n\n<!-- Platforms: Customize as needed. -->\n<gap:platforms>\n   <gap:platform name=\"android\" minVersion=\"2.3\" />\n   <gap:platform name=\"ios\" />\n   <gap:platform name=\"winphone\" />\n</gap:platforms>\n</widget>", 
      "title": "Smart Trek Visualizer", 
      "phoneGapLanguages": "en", 
      "defaultformsize": "1080x800", 
      "_dbfiles": [], 
      "manifest": "", 
      "statusbar": "black-translucent", 
      "minimalUI": ", minimal-ui", 
      "onorientationchange": "", 
      "splashscreen": "nsb/images/SplashScreen.png", 
      "hiddenheaders": ""
    }
  ], 
  "deploy_userName": "", 
  "deploy_global": true, 
  "cached_js": "", 
  "deploy_user": false, 
  "_uuid": "836c4624c626445782527b69b0d1d93a", 
  "_old_pal": false, 
  "deploy_port": "21", 
  "deploy_password": "", 
  "_tempdir": "/var/folders/15/1kq2pwn16dlgtkg00lxc10_40000gn/T/tmps6CJ1g", 
  "deploy_localPath": "", 
  "deploy_path": "", 
  "phonegap_auth_token": "", 
  "id": "", 
  "deploy_protocol": "ftp", 
  "deploy_server": "", 
  "phonegap_password": "", 
  "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
  "script": "", 
  "deploy_local": false, 
  "phonegap_email": "", 
  "!type": "Project", 
  "expanded_pmp": true, 
  "filename": "", 
  "libraries": [], 
  "_sample": false, 
  "version": 4, 
  "language_version": 7
}