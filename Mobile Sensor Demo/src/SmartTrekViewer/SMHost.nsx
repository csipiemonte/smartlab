{
  "children": [
    {
      "browserwarnmsg": "Please use Google Chrome, Apple Safari or another supported browser.", 
      "obfuscation": "", 
      "EULA": "", 
      "cached_js": "\n\n", 
      "ChromeAppLaunch": "chrome.app.runtime.onLaunched.addListener(function() {{\n  chrome.app.window.create(\"index.html\", {{\n    \"bounds\": {{\"width\": {appwidth}, \"height\": {appheight} }}\n  }})\n}});", 
      "iconAndroid": "nsb/images/196.png", 
      "expanded_pmp": true, 
      "fontFamily": "helvetica", 
      "ChromeManifest": "{{ \"manifest_version\": 2,\n  \"name\": \"{title}\",\n  \"version\": \"{version}\",\n  \"offline_enabled\": true,\n  \"description\": \"{description}\",\n  \"display_in_launcher\": true,\n  \"display_in_new_tab_page\": true,\n  \"short_name\": \"{title}\",\n  \"icons\": {{ \"16\": \"nsb/images/16.png\",\n            \"128\": \"nsb/images/128.png\" }},\n  \"author\": \"{copyright}\",\n  \"app\": {{\"background\": {{\"scripts\": [\"background.js\"]}}}}}}", 
      "onresize": "", 
      "manifestFile": "appcache", 
      "phoneGapBuildID": "", 
      "firstform": "Form1", 
      "style": "", 
      "FastClick": "true", 
      "cached_js_script_hash": "e1c06d85ae7b8b032bef47e42e4c08f9", 
      "copyright": "Copyright 2014 Societ\u00e0 ABC", 
      "script": "\n\n", 
      "!type": "Page", 
      "id": "SMHost1", 
      "theme": "a", 
      "version": "1.0.0", 
      "rtl": "", 
      "phoneGapDebugger": false, 
      "manifestName": "OfflineApp", 
      "children": [
        {
          "fullScreen": "true", 
          "onsubmit": "", 
          "cached_js": "var NUMSENSOR = 5;\nvar sensor=createMultiDimArray(NUMSENSOR);\nvar marker=createMultiDimArray(NUMSENSOR);\nvar markerH=createMultiDimArray(NUMSENSOR);\nvar client;\nvar topics;\nvar topics2;\nvar idSensore;\nvar tipoOp;\nvar map;\nvar autobounds;\nvar lineaConfineCoords;\nvar lineaConfine;\nvar poliConfineCoords;\nvar poliConfine;\n\n // manage the click on \"Connect\" button\nbtnConnetti.onclick = function() { savethefunction_rvar=\"\";\n   var urlClient;\n   var markerBounds;\n   var pnt;\n // istantiate a STOMP client\n    urlClient = \"ws://stream.smartdatanet.it/ws\";\n    client = Stomp.client(urlClient);\n    client.connect(\"guest\" , \"Aekieh6F\" , connectCallBack, errorCallback);\n    markerBounds = new google.maps.LatLngBounds();\n    pnt = new google.maps.LatLng(45.020169, 7.527439);\n    markerBounds.extend(pnt);\n    pnt = new google.maps.LatLng(45.122730, 7.762615);\n    markerBounds.extend(pnt);\n    map.fitBounds(markerBounds);\nreturn savethefunction_rvar; }\n\nbtnDisconnetti.onclick = function() { savethefunction_rvar=\"\";\n   var markerBounds;\n   var pnt;\n // disconnect the server and reset the screen view\n    client.disconnect(disconnectCallback);\n    btnConnetti.disabled = False;\n    btnDisconnetti.disabled = True;\n    cmbSensore.disabled = False;\n    markerBounds = new google.maps.LatLngBounds();\n    pnt = new google.maps.LatLng(45.020169, 7.527439);\n    markerBounds.extend(pnt);\n    pnt = new google.maps.LatLng(45.122730, 7.762615);\n    markerBounds.extend(pnt);\n    map.fitBounds(markerBounds);\nreturn savethefunction_rvar; }\n\n // init the screen view\nForm1.onshow = function() { savethefunction_rvar=\"\";\n   var point;\n // define sensor metadata\n    sensor[0] = {name: \"phonegps01\" , id: \"cc1bfe50-491c-560d-a235-0e4134bbdc23\" , topic: \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\" , marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\" , inbound: \"false\"}\n    sensor[1] = {name: \"phonegps02\" , id: \"5391c45d-7350-5f9b-b971-f711e2766123\" , topic: \"/topic/output.smartlab.5391c45d-7350-5f9b-b971-f711e2766123_position\" , marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\" , inbound: \"false\"}\n    sensor[2] = {name: \"phonegps03\" , id: \"a8b223bc-6aa8-5fa2-a217-32546bbd5b70\" , topic: \"/topic/output.smartlab.a8b223bc-6aa8-5fa2-a217-32546bbd5b70_position\" , marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\" , inbound: \"false\"}\n    sensor[3] = {name: \"phonegps04\" , id: \"3a58c011-1ad5-5b60-b1fc-68f8d81098e0\" , topic: \"/topic/output.smartlab.3a58c011-1ad5-5b60-b1fc-68f8d81098e0_position\" , marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\" , inbound: \"false\"}\n    sensor[4] = {name: \"phonegps05\" , id: \"06bbb064-e808-50b6-9fcc-bcf43550d09e\" , topic: \"/topic/output.smartlab.06bbb064-e808-50b6-9fcc-bcf43550d09e_position\" , marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\" , inbound: \"false\"}\n\n // GUI Init\n //button\n    btnConnetti.disabled = False;\n    btnDisconnetti.disabled = True;\n    cmbSensore.disabled = False;\n\n // combo box\n    for   (i = 0; i  <= (NUMSENSOR-1); i ++) {\n      if(sensor[i].name != \"n.d.\") {\n        cmbSensore.addItem(sensor[i].name, sensor[i].name);\n      }\n  }\n\n    cmbSensore.addItem(\"all phone (no filter)\" , \"all\");\n    cmbSensore.addItem(\"all phone filtered\" , \"allfilter\");\n    cmbSensore.addItem(\"all phone filtered polygon\" , \"allfiltergeo\");\n\n // label\n    lblSensore.Caption = cmbSensore.selectedValue();\n    idSensore = cmbSensore.selectedItem();\n\n // default topics\n    topics = sensor[0].topic;\n\n // maps\n    GoogleMap1.mapOptions.longitude = 7.6761;\n    GoogleMap1.mapOptions.latitude = 45.0781;\n    GoogleMap1.refresh();\n\n\n // get map identification\n    point = new google.maps.LatLng(45.0781, 7.6761);\n    mapOptions = {zoom: 10, center: point, zoomControl: False, disableDefaultUI: True}\n    map = new google.maps.Map(document.getElementById(\"GoogleMap1\"), mapOptions);\n\n // define marker\n\n    for   (i = 0; i  <= (NUMSENSOR-1); i ++) {\n        marker[i] = new google.maps.Marker({position: point, map: map, title: sensor[i].name + \": \" + sensor[i].id});\n        markerH[i] = new google.maps.Marker({position: point, map: map, title: sensor[i].name + \": \" + sensor[i].id});\n        icon = new google.maps.MarkerImage(\"\"  +  (i+1)  +  \".png\" , new google.maps.Size(32, 32),new google.maps.Point(0,0), new google.maps.Point(16, 16));\n        marker[i].setIcon(icon);\n        marker[i].setVisible(False);\n        icon2 = new google.maps.MarkerImage(\"\"  +  (i+1)  +  \"x.png\" , new google.maps.Size(32, 32),new google.maps.Point(0,0), new google.maps.Point(16, 16));\n        markerH[i].setIcon(icon2);\n        markerH[i].setVisible(False);\n    }\n\n    tblSensor.rows = NUMSENSOR + 1;\n    autobounds = False;\n\n    poliConfineCoords = [new google.maps.LatLng(45.030603, 7.640563), new google.maps.LatLng(45.041278, 7.589752), new google.maps.LatLng(45.036183, 7.551986), new google.maps.LatLng(45.057044, 7.530357), new google.maps.LatLng(45.079837,7.617904), new google.maps.LatLng(45.030603, 7.640563)];\n    poliConfine = new google.maps.Polygon({path: poliConfineCoords, strokeColor: \"#FF0000\" , strokeOpacity: 1.0, strokeWeight: 3, fillColor: \"#FF0000\" , fillOpacity: 0.35});\n    poliConfine.setMap(map);\n    lineaConfineCoords = [new google.maps.LatLng(0, 7.6), new google.maps.LatLng(180, 7.6)];\n    lineaConfine = new google.maps.Polyline({path: lineaConfineCoords, geodesic: True, strokeColor: \"#0000FF\" , strokeOpacity: 1.0, strokeWeight: 3});\n    lineaConfine.setMap(map);\n\n\nreturn savethefunction_rvar; }\n\nfltBounds.onchange = function() { savethefunction_rvar=\"\";\n  if(fltBounds.value() == \"On\") {\n      autobounds = True;\n } else {\n      autobounds = False;\n  }\nreturn savethefunction_rvar; }\n\n // manage the topic selection \ncmbSensore.onchange = function() { savethefunction_rvar=\"\";\n\n    switch (True) {\n    case ((cmbSensore.selectedValue()) == \"phonegps01\"):\n        topics = sensor[0].topic;\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"phonegps02\"):\n        topics = sensor[1].topic;\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"phonegps03\"):\n        topics = sensor[2].topic;\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"phonegps04\"):\n        topics = sensor[3].topic;\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"phonegps05\"):\n        topics = sensor[3].topic;\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"all\"):\n      topics = \"/topic/output.smartlab.internal_allgps\";\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"allfilter\"):\n      topics = \"/topic/output.smartlab.internal_allgpsfilterlong\";\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"allfiltergeo\"):\n      topics = \"/topic/output.smartlab.internal_allgpsfiltergeo\";\n      topics2 = \"/topic/output.smartlab.internal_gpscounter\";\n    }\n\n    lblSensore.Caption = cmbSensore.selectedValue();\n    idSensore = cmbSensore.selectedItem();\nreturn savethefunction_rvar; }\n\n // subscribe the topic\nfunction connectCallBack(x) {\n    btnConnetti.disabled = True;\n    btnDisconnetti.disabled = False;\n    cmbSensore.disabled = True;\n    switch (True) {\n    case ((cmbSensore.selectedValue()) == \"phonegps01\" ): case ((cmbSensore.selectedValue()) ==  \"phonegps02\" ): case ((cmbSensore.selectedValue()) ==  \"all\" ): case ((cmbSensore.selectedValue()) ==  \"allfilter\"):\n        client.subscribe(topics, messageCallback);\n        _msgbox_confirm(\"You are connected and subscribed to topics: \" + topics);\n\tbreak;\n    case ((cmbSensore.selectedValue()) == \"allfiltergeo\"):\n        client.subscribe(topics, messageCallback);\n        client.subscribe(topics2, messageCallback2);\n        _msgbox_confirm(\"You are connected and subscribed to topics: \" + topics + '\\n' + \"and topic \"+ topics2);\n    }\n\n}\n\n // connection error\nfunction errorCallback(x) {\n  btnConnetti.disabled = False;\n  btnDisconnetti.disabled = True;\n  cmbSensore.disabled = False;\n  _msgbox_confirm(\"Connection error\");\n}\n\n // manage the stop message\nfunction messageCallback(x) {\n var jsText;\n var obJSON;\n var latitude;\n var longitude;\n var altezza;\n var vel;\n var tstamp;\n var indice;\n var markerBounds;\n var inbound;\n\n // remove the stomp header\n  jsText =\"\"  +  x;\n  p =  InStr(jsText, \"{\");\n  jsText = Mid(jsText, p);\n\n // convert the JSON to an object\n  obJSON = JSON.parse(jsText);\n\n // show the info on the screen\n\n  ids = obJSON.sensor;\n  indice = 0;\n  for   (indice = 0; indice  <= (NUMSENSOR - 1); indice ++) {\n    if(sensor[indice].id == ids) {\n         break;\n    }\n  }\n\n  if(indice >= NUMSENSOR) {\n     return;\n  }\n\n  latitude = obJSON.values[0].components.latitude;\n  longitude = obJSON.values[0].components.longitude;\n  altezza =obJSON.values[0].components.altitude;\n  vel = obJSON.values[0].components.speed;\n  tstamp = obJSON.values[0].time;\n\n\n  sensor[indice].marked = 1;\n  sensor[indice].lat = latitude;\n  sensor[indice].lon = longitude;\n  sensor[indice].alt = altezza;\n  sensor[indice].ts = tstamp;\n\n  sensor[indice].inbound = \"false\";\n\n  point = new google.maps.LatLng(latitude, longitude);\n\n  if(cmbSensore.selectedValue() == \"allfiltergeo\") {\n    inbound = obJSON.values[0].components.inbound;\n    sensor[indice].inbound = inbound;\n\n    if(inbound == \"true\") {\n      markerH[indice].setPosition(point);\n      markerH[indice].setVisible(True);\n      marker[indice].setVisible(False);\n } else {\n      marker[indice].setPosition(point);\n      marker[indice].setVisible(True);\n      markerH[indice].setVisible(False);\n    }\n } else {\n    marker[indice].setPosition(point);\n    marker[indice].setVisible(True);\n    markerH[indice].setVisible(False);\n  }\n\n // refresh screen\n  markerBounds = new google.maps.LatLngBounds();\n\n  for   (i = 0; i  <= (NUMSENSOR - 1); i ++) {\n    tblSensor.setValue(i+1,0,sensor[i].name);\n    if(sensor[i].marked == 1) {\n      if(autobounds == True) {\n        pnt = new google.maps.LatLng(sensor[i].lat, sensor[i].lon);\n        markerBounds.extend(pnt);\n      }\n      tblSensor.setValue(i+1, 1, sensor[i].ts);\n      tblSensor.setValue(i+1, 2, sensor[i].lat);\n      tblSensor.setValue(i+1, 3, sensor[i].lon);\n      tblSensor.setValue(i+1, 4, sensor[i].alt);\n      tblSensor.setValue(i+1, 5, sensor[i].speed);\n      tblSensor.setValue(i+1, 6, sensor[i].inbound);\n } else {\n      tblSensor.setValue(i+1, 1, \"-\");\n      tblSensor.setValue(i+1, 2, \"-\");\n      tblSensor.setValue(i+1, 3, \"-\");\n      tblSensor.setValue(i+1, 4, \"-\");\n      tblSensor.setValue(i+1, 5, \"-\");\n      tblSensor.setValue(i+1, 6, \"-\");\n    }\n  }\n\n  if(autobounds == False) {\n      pnt = new google.maps.LatLng(45.020169, 7.527439);\n      markerBounds.extend(pnt);\n      pnt = new google.maps.LatLng(45.122730, 7.762615);\n      markerBounds.extend(pnt);\n  }\n\n  map.fitBounds(markerBounds);\n\n}\n\nfunction messageCallback2(x) {\n var v;\n  jsText =\"\"  +  x;\n  p =  InStr(jsText, \"{\");\n  jsText = Mid(jsText, p);\n\n // convert the JSON to an object\n\n  obJSON = JSON.parse(jsText);\n  v = Math.floor(obJSON.values[0].components.counter);\n  console.log(v);\n\n  if(v == 0) {\n    lblAlert.Caption = \"no alert\";\n } else {\n    lblAlert.Caption = \"Alert!!! \" + v + \" veicle(s) in restricted area\";\n  }\n}\n\nfunction disconnectCallback(x) {\n  location = \".\";\n\n}\n\n\n\n\n\n\n", 
          "onkeypress": "", 
          "_uuid": "d13bfc8252514b5eb1cd22a0dad446d7", 
          "height": 750, 
          "scroll_options": "mouseWheel:true, scrollbars:true, bounce:true, zoom:false", 
          "background": "", 
          "locked": false, 
          "expanded_pmp": true, 
          "scrolling": "false", 
          "id": "Form1", 
          "openMode": "none", 
          "style": "", 
          "cached_js_script_hash": "a1feb9f7173829b851bc0089fcf77ce8", 
          "language": "BASIC", 
          "onshow": "Form1_onshow()", 
          "script": "Const NUMSENSOR = 5\nDim sensor(NUMSENSOR)\nDim marker(NUMSENSOR)\nDim markerH(NUMSENSOR)\nDim client\nDim topics\nDim topics2\nDim idSensore\nDim tipoOp\nDim map\nDim autobounds\nDim lineaConfineCoords\nDim lineaConfine\nDim poliConfineCoords\nDim poliConfine\n\n' manage the click on \"Connect\" button\nFunction btnConnetti_onclick()\n    Dim urlClient\n    Dim markerBounds\n    Dim pnt\n    ' istantiate a STOMP client\n    urlClient = \"ws://stream.smartdatanet.it/ws\" \n    client = Stomp.client(urlClient)\n    client.connect(\"guest\", \"Aekieh6F\", connectCallBack, errorCallback)\n    markerBounds = new google.maps.LatLngBounds()\n    pnt = new google.maps.LatLng(45.020169, 7.527439)\n    markerBounds.extend(pnt)\n    pnt = new google.maps.LatLng(45.122730, 7.762615)\n    markerBounds.extend(pnt)\n    map.fitBounds(markerBounds)\nEnd Function\n\nFunction btnDisconnetti_onclick()\n    Dim markerBounds\n    Dim pnt\n    ' disconnect the server and reset the screen view\n    client.disconnect(disconnectCallback)\n    btnConnetti.disabled = False\n    btnDisconnetti.disabled = True\n    cmbSensore.disabled = False\n    markerBounds = new google.maps.LatLngBounds()\n    pnt = new google.maps.LatLng(45.020169, 7.527439)\n    markerBounds.extend(pnt)\n    pnt = new google.maps.LatLng(45.122730, 7.762615)\n    markerBounds.extend(pnt)\n    map.fitBounds(markerBounds)\nEnd Function\n\n' init the screen view\nFunction Form1_onshow()\n    Dim point\n    ' define sensor metadata\n    sensor(0) = {name: \"phonegps01\", id: \"cc1bfe50-491c-560d-a235-0e4134bbdc23\", topic: \"/topic/output.smartlab.cc1bfe50-491c-560d-a235-0e4134bbdc23_position\", marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\", inbound: \"false\"}\n    sensor(1) = {name: \"phonegps02\", id: \"5391c45d-7350-5f9b-b971-f711e2766123\", topic: \"/topic/output.smartlab.5391c45d-7350-5f9b-b971-f711e2766123_position\", marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\", inbound: \"false\"}\n    sensor(2) = {name: \"phonegps03\", id: \"a8b223bc-6aa8-5fa2-a217-32546bbd5b70\", topic: \"/topic/output.smartlab.a8b223bc-6aa8-5fa2-a217-32546bbd5b70_position\", marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\", inbound: \"false\"}\n    sensor(3) = {name: \"phonegps04\", id: \"3a58c011-1ad5-5b60-b1fc-68f8d81098e0\", topic: \"/topic/output.smartlab.3a58c011-1ad5-5b60-b1fc-68f8d81098e0_position\", marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\", inbound: \"false\"}\n    sensor(4) = {name: \"phonegps05\", id: \"06bbb064-e808-50b6-9fcc-bcf43550d09e\", topic: \"/topic/output.smartlab.06bbb064-e808-50b6-9fcc-bcf43550d09e_position\", marked: 0, lat: 0, lon: 0, alt: 0, speed: 0, ts: \"null\", inbound: \"false\"}\n     \n    ' GUI Init\n    'button\n    btnConnetti.disabled = False\n    btnDisconnetti.disabled = True\n    cmbSensore.disabled = False\n    \n    ' combo box\n    For i = 0 To (NUMSENSOR-1)\n      If sensor(i).name <> \"n.d.\" Then\n        cmbSensore.addItem(sensor(i).name, sensor(i).name)\n      End If \n  Next\n  \n    cmbSensore.addItem(\"all phone (no filter)\", \"all\")\n    cmbSensore.addItem(\"all phone filtered\", \"allfilter\")\n    cmbSensore.addItem(\"all phone filtered polygon\", \"allfiltergeo\")\n    \n    ' label\n    lblSensore.Caption = cmbSensore.selectedValue()\n    idSensore = cmbSensore.selectedItem()\n    \n    ' default topics\n    topics = sensor(0).topic\n    \n    ' maps\n    GoogleMap1.mapOptions.longitude = 7.6761\n    GoogleMap1.mapOptions.latitude = 45.0781\n    GoogleMap1.refresh()\n    \n    \n    ' get map identification\n    point = new google.maps.LatLng(45.0781, 7.6761)\n    mapOptions = {zoom: 10, center: point, zoomControl: False, disableDefaultUI: True}\n    map = new google.maps.Map(document.getElementById(\"GoogleMap1\"), mapOptions)\n    \n    ' define marker\n    \n    For i = 0 To (NUMSENSOR-1)\n        marker(i) = new google.maps.Marker({position: point, map: map, title: sensor(i).name + \": \" + sensor(i).id})\n        markerH(i) = new google.maps.Marker({position: point, map: map, title: sensor(i).name + \": \" + sensor(i).id})\n        icon = new google.maps.MarkerImage(\"\" & (i+1) & \".png\", new google.maps.Size(32, 32),new google.maps.Point(0,0), new google.maps.Point(16, 16))\n        marker(i).setIcon(icon)\n        marker(i).setVisible(False)\n        icon2 = new google.maps.MarkerImage(\"\" & (i+1) & \"x.png\", new google.maps.Size(32, 32),new google.maps.Point(0,0), new google.maps.Point(16, 16))\n        markerH(i).setIcon(icon2)\n        markerH(i).setVisible(False)\n    Next\n    \n    tblSensor.rows = NUMSENSOR + 1\n    autobounds = False\n    \n    poliConfineCoords = [new google.maps.LatLng(45.030603, 7.640563), new google.maps.LatLng(45.041278, 7.589752), new google.maps.LatLng(45.036183, 7.551986), new google.maps.LatLng(45.057044, 7.530357), new google.maps.LatLng(45.079837,7.617904), new google.maps.LatLng(45.030603, 7.640563)]\n    poliConfine = new google.maps.Polygon({path: poliConfineCoords, strokeColor: \"#FF0000\", strokeOpacity: 1.0, strokeWeight: 3, fillColor: \"#FF0000\", fillOpacity: 0.35})\n    poliConfine.setMap(map)\n    lineaConfineCoords = [new google.maps.LatLng(0, 7.6), new google.maps.LatLng(180, 7.6)];\n    lineaConfine = new google.maps.Polyline({path: lineaConfineCoords, geodesic: True, strokeColor: \"#0000FF\", strokeOpacity: 1.0, strokeWeight: 3})\n    lineaConfine.setMap(map)\n    \n\nEnd Function\n\nFunction fltBounds_onchange()\n  If fltBounds.value() = \"On\" Then\n      autobounds = True\n  Else\n      autobounds = False\n  End If\nEnd Function\n\n' manage the topic selection \nFunction cmbSensore_onchange()\n  \n    Select Case cmbSensore.selectedValue()\n    Case \"phonegps01\"\n        topics = sensor(0).topic\n    Case \"phonegps02\"\n        topics = sensor(1).topic\n    Case \"phonegps03\"\n        topics = sensor(2).topic\n    Case \"phonegps04\"\n        topics = sensor(3).topic\n    Case \"phonegps05\"\n        topics = sensor(4).topic\n    Case \"all\"\n      topics = \"/topic/output.smartlab.internal_allgps\"\n    Case \"allfilter\"\n      topics = \"/topic/output.smartlab.internal_allgpsfilterlong\"\n    Case \"allfiltergeo\"\n      topics = \"/topic/output.smartlab.internal_allgpsfiltergeo\"\n      topics2 = \"/topic/output.smartlab.internal_gpscounter\"\n    End Select\n  \n    lblSensore.Caption = cmbSensore.selectedValue()\n    idSensore = cmbSensore.selectedItem()\nEnd Function\n\n' subscribe the topic\nSub connectCallBack(x)\n    btnConnetti.disabled = True\n    btnDisconnetti.disabled = False\n    cmbSensore.disabled = True\n    Select Case cmbSensore.selectedValue()\n    Case \"phonegps01\", \"phonegps02\", \"phonegps03\", \"phonegps04\", \"phonegps05\", \"all\", \"allfilter\"\n        client.subscribe(topics, messageCallback)\n        MsgBox(\"You are connected and subscribed to topics: \" + topics)\n    Case \"allfiltergeo\"\n        client.subscribe(topics, messageCallback)\n        client.subscribe(topics2, messageCallback2)\n        MsgBox(\"You are connected and subscribed to topics: \" + topics + vbCRLF + \"and topic \"+ topics2)\n    End Select\n    \nEnd Sub\n\n' connection error\nSub errorCallback(x)\n  btnConnetti.disabled = False\n  btnDisconnetti.disabled = True\n  cmbSensore.disabled = False\n  MsgBox \"Connection error\"\nEnd Sub\n\n' manage the stop message\nSub messageCallback(x)\n  Dim jsText\n  Dim obJSON\n  Dim latitude\n  Dim longitude\n  Dim altezza\n  Dim vel\n  Dim tstamp\n  Dim indice\n  Dim markerBounds\n  Dim inbound\n  \n  ' remove the stomp header\n  jsText =\"\" & x\n  p =  InStr(jsText, \"{\")\n  jsText = Mid(jsText, p)\n  \n  ' convert the JSON to an object\n  obJSON = JSON.parse(jsText)\n  \n  ' show the info on the screen\n  \n  ids = obJSON.sensor\n  indice = 0 \n  For indice = 0 To (NUMSENSOR - 1)\n    If sensor(indice).id = ids Then\n        Exit For\n    End If\n  Next\n  \n  If indice >= NUMSENSOR Then \n    Exit Sub\n  End If \n  \n  latitude = obJSON.values[0].components.latitude\n  longitude = obJSON.values[0].components.longitude\n  altezza =obJSON.values[0].components.altitude\n  vel = obJSON.values[0].components.speed\n  tstamp = obJSON.values[0].time\n  \n  \n  sensor(indice).marked = 1\n  sensor(indice).lat = latitude\n  sensor(indice).lon = longitude\n  sensor(indice).alt = altezza\n  sensor(indice).ts = tstamp\n  \n  sensor(indice).inbound = \"false\"\n  \n  point = new google.maps.LatLng(latitude, longitude)\n  \n  If cmbSensore.selectedValue() = \"allfiltergeo\" Then\n    inbound = obJSON.values[0].components.inbound\n    sensor(indice).inbound = inbound\n\n    If inbound = \"true\" Then\n      markerH(indice).setPosition(point)\n      markerH(indice).setVisible(True)\n      marker(indice).setVisible(False)\n    Else\n      marker(indice).setPosition(point)\n      marker(indice).setVisible(True)\n      markerH(indice).setVisible(False)\n    End If \n  Else\n    marker(indice).setPosition(point)\n    marker(indice).setVisible(True)\n    markerH(indice).setVisible(False)\n  End If\n  \n  ' refresh screen\n  markerBounds = new google.maps.LatLngBounds()\n  \n  For i = 0 To (NUMSENSOR - 1)\n    tblSensor.setValue(i+1,0,sensor(i).name)\n    If sensor(i).marked = 1 Then\n      If autobounds = True Then\n        pnt = new google.maps.LatLng(sensor(i).lat, sensor(i).lon)\n        markerBounds.extend(pnt)\n      End If\n      tblSensor.setValue(i+1, 1, sensor(i).ts)\n      tblSensor.setValue(i+1, 2, sensor(i).lat)\n      tblSensor.setValue(i+1, 3, sensor(i).lon)\n      tblSensor.setValue(i+1, 4, sensor(i).alt)\n      tblSensor.setValue(i+1, 5, sensor(i).speed)\n      tblSensor.setValue(i+1, 6, sensor(i).inbound)\n    Else\n      tblSensor.setValue(i+1, 1, \"-\")\n      tblSensor.setValue(i+1, 2, \"-\")\n      tblSensor.setValue(i+1, 3, \"-\")\n      tblSensor.setValue(i+1, 4, \"-\")\n      tblSensor.setValue(i+1, 5, \"-\")\n      tblSensor.setValue(i+1, 6, \"-\")\n    End If\n  Next\n\n  If autobounds = False Then\n      pnt = new google.maps.LatLng(45.020169, 7.527439)\n      markerBounds.extend(pnt)\n      pnt = new google.maps.LatLng(45.122730, 7.762615)\n      markerBounds.extend(pnt)\n  End If\n  \n  map.fitBounds(markerBounds)\n  \nEnd Sub\n\nSub messageCallback2(x)\n  Dim v\n  jsText =\"\" & x\n  p =  InStr(jsText, \"{\")\n  jsText = Mid(jsText, p)\n  \n  ' convert the JSON to an object\n  \n  obJSON = JSON.parse(jsText)\n  v = Int(obJSON.values[0].components.counter)\n \n  If v = 0 Then\n    lblAlert.Caption = \"no alert\"\n  Else \n    lblAlert.Caption = \"Alert!!! \" + v + \" veicle(s) in restricted area\"\n  End If  \nEnd Sub\n\nSub disconnectCallback(x)\n  location = \".\"\n  \nEnd Sub\n\n\n\n\n\n\n", 
          "top": 0, 
          "!type": "Form", 
          "onhide": "", 
          "children": [
            {
              "right": "10", 
              "cached_js": "", 
              "class": "", 
              "_uuid": "ee61a189c1d24363aa1913ea213a120a", 
              "height": 733, 
              "id": "Line1", 
              "borderColor": "gray", 
              "borderStyle": "solid", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 5, 
              "script": "", 
              "!type": "Line", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 945, 
              "borderWidth": 1, 
              "backgroundColor": "grigio", 
              "hidden": "hidden='true'", 
              "align": "", 
              "left": 10
            }, 
            {
              "mini": "ui-mini", 
              "right": "auto", 
              "cached_js": "", 
              "groupBegin": "", 
              "color": "", 
              "image": "", 
              "height": "auto", 
              "disabled": "", 
              "fontFamily": "", 
              "onchange": "", 
              "children": [], 
              "borderColor": "", 
              "ChangeForm": "", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "top": 73, 
              "!type": "Button_jqm14", 
              "id": "btnConnetti", 
              "width": 100, 
              "theme": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "fontSize": "", 
              "hidden": "", 
              "icon": "", 
              "onclick": "Connetti_onclick()", 
              "onmouseout": "", 
              "class": "", 
              "_uuid": "7d8c9dd7ddb841d59c6566065443dc85", 
              "padding": "", 
              "fontWeight": "", 
              "onmousedown": "", 
              "onfocus": "", 
              "backgroundColor": "", 
              "ontouchend": "", 
              "fontStyle": "", 
              "name": "", 
              "ontouchmove": "", 
              "corners": "", 
              "bottom": "auto", 
              "expanded_pmp": true, 
              "value": "Connect", 
              "iconPos": "none", 
              "groupEnd": "", 
              "ontouchstart": "", 
              "left": 31
            }, 
            {
              "mini": "ui-mini", 
              "right": "auto", 
              "cached_js": "", 
              "groupBegin": "", 
              "color": "", 
              "image": "", 
              "height": "auto", 
              "disabled": "", 
              "fontFamily": "", 
              "onchange": "", 
              "children": [], 
              "borderColor": "", 
              "ChangeForm": "", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "top": 73, 
              "!type": "Button_jqm14", 
              "id": "btnDisconnetti", 
              "width": 100, 
              "theme": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "fontSize": "", 
              "hidden": "", 
              "icon": "", 
              "onclick": "btnDisconnetti_onclick()", 
              "onmouseout": "", 
              "class": "", 
              "_uuid": "d67edbda51da44868fe49c6f35dd416c", 
              "padding": "", 
              "fontWeight": "", 
              "onmousedown": "", 
              "onfocus": "", 
              "backgroundColor": "", 
              "ontouchend": "", 
              "fontStyle": "", 
              "name": "", 
              "ontouchmove": "", 
              "corners": "", 
              "bottom": "auto", 
              "expanded_pmp": true, 
              "value": "Logout", 
              "iconPos": "none", 
              "groupEnd": "", 
              "ontouchstart": "", 
              "left": 140
            }, 
            {
              "cached_js": "", 
              "right": "auto", 
              "disableDefaultUI": true, 
              "height": "430", 
              "noClear": false, 
              "disableDoubleClickZoom": true, 
              "expanded_pmp": true, 
              "draggableCursor": "", 
              "children": [], 
              "draggingCursor": "", 
              "mapTypeId": "roadmap", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "script": "", 
              "tilt": 0, 
              "top": 146, 
              "scrollwheel": false, 
              "!type": "GoogleMap", 
              "id": "GoogleMap1", 
              "width": "900", 
              "minZoom": 0, 
              "onmousemove": "", 
              "onmouseup": "", 
              "latitude": "45.0781", 
              "onclick": "", 
              "onmouseout": "", 
              "_uuid": "0b8e2b60458442b49e39fb42251a2b66", 
              "mapMaker": false, 
              "background": "#F0FFFF", 
              "streetViewControl": false, 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "ontouchmove": "", 
              "bottom": "auto", 
              "zoom": 10, 
              "longitude": "7.6761", 
              "zoomControl": false, 
              "draggable": false, 
              "maxZoom": 10, 
              "keyboardShortcuts": true, 
              "ontouchstart": "", 
              "heading": 0, 
              "left": 45
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Sensor:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label1", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 72, 
              "!type": "Label", 
              "children": [], 
              "width": 70, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "482b55b8663c498b994f597afe037eae", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 263
            }, 
            {
              "mini": "data-mini=true", 
              "right": "auto", 
              "cached_js": "", 
              "height": "auto", 
              "disabled": "", 
              "multiSelect": "", 
              "onchange": "cmbSensore_onchange()", 
              "id": "cmbSensore", 
              "nativeMenu": "true", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 71, 
              "!type": "Select_jqm14", 
              "children": [], 
              "width": 254, 
              "theme": "", 
              "onmousemove": "", 
              "onclick": "", 
              "onfocus": "", 
              "onmouseup": "", 
              "onmouseout": "", 
              "_uuid": "f9557bf87b764bb896dbc02d321bf26b", 
              "selectedIndex": 1, 
              "group": "", 
              "onmousedown": "", 
              "placeholder": 0, 
              "class": "", 
              "icon": "arrow-d", 
              "ontouchend": "", 
              "name": "", 
              "ontouchmove": "", 
              "items": "", 
              "align": "", 
              "title": "Combo Box", 
              "expanded_pmp": true, 
              "iconPos": "right", 
              "script": "", 
              "values": "1,2", 
              "inline": "false", 
              "overlayTheme": "a", 
              "ontouchstart": "", 
              "left": 338
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Label", 
              "height": 34, 
              "fontFamily": "helvetica", 
              "id": "lblSensore", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 71, 
              "!type": "Label", 
              "children": [], 
              "width": 348, 
              "fontSize": 14, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "94e6e4c889334cd3b922137fbadf4c93", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 600
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Smart Trek Visualizer", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label2", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 15, 
              "!type": "Label", 
              "children": [], 
              "width": 312, 
              "fontSize": 30, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "07bb98a8c3ef4c5d9f38cb0332d3d985", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 362
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onmouseout": "", 
              "onclick": "", 
              "class": "", 
              "_uuid": "be3bad8f3bec454bb6db88987e1f6f39", 
              "height": 44, 
              "onmousedown": "", 
              "id": "Image1", 
              "src": "img/logosdp.jpg", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "ontouchend": "", 
              "bottom": "auto", 
              "ontouchmove": "", 
              "top": 10, 
              "script": "", 
              "!type": "Image", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 203, 
              "onmousemove": "", 
              "onmouseup": "", 
              "hidden": "", 
              "ontouchstart": "", 
              "left": 24
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onmouseout": "", 
              "onclick": "", 
              "class": "", 
              "_uuid": "0479f57812ab470889f8dc0085d5593a", 
              "height": 39, 
              "onmousedown": "", 
              "id": "Image2", 
              "src": "img/logoCSI.png", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "ontouchend": "", 
              "bottom": "auto", 
              "ontouchmove": "", 
              "top": 14, 
              "script": "", 
              "!type": "Image", 
              "expanded_pmp": true, 
              "children": [], 
              "width": 83, 
              "onmousemove": "", 
              "onmouseup": "", 
              "hidden": "", 
              "ontouchstart": "", 
              "left": 879
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "colWidths": "11%, 23%, 18%, 19%, 11%, 10%, 9%", 
              "cols": 7, 
              "height": 165, 
              "disabled": "", 
              "scroll_options": "mouseWheel:true, scrollbars:true, bounce:true, zoom:false", 
              "titles": "Sensor, TS, Latitude, Longitude, Altitude [m], Speed [m/s], Inbound", 
              "onchange": "", 
              "id": "tblSensor", 
              "cellstyle": "", 
              "rows": 6, 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 580, 
              "!type": "Grid", 
              "children": [], 
              "width": 898, 
              "onmousemove": "", 
              "onclick": "", 
              "onfocus": "", 
              "onmouseup": "", 
              "onmouseout": "", 
              "_uuid": "d5e1c86d349c4adea0f0ee6564f87ede", 
              "style": "table-layout:fixed;\nfont-size:10;", 
              "onmousedown": "", 
              "scrolling": "true", 
              "class": "", 
              "ontouchend": "", 
              "name": "", 
              "ontouchmove": "", 
              "alignments": "", 
              "script": "", 
              "expanded_pmp": true, 
              "ontouchstart": "", 
              "rowHeights": "", 
              "left": 47
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "black", 
              "text": "Map auto resize:", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "Label3", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 120, 
              "!type": "Label", 
              "children": [], 
              "width": 135, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "24d95b8795a446f992e0e9466ff33a86", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "left", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 42
            }, 
            {
              "mini": "data-mini=true", 
              "right": "auto", 
              "cached_js": "", 
              "height": "auto", 
              "disabled": "", 
              "onchange": "fltBounds_onchange()", 
              "id": "fltBounds", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 116, 
              "!type": "FlipToggle_jqm14", 
              "children": [], 
              "width": "auto", 
              "theme": "", 
              "onmousemove": "", 
              "onmouseup": "", 
              "onfocus": "", 
              "onclick": "", 
              "onmouseout": "", 
              "_uuid": "4816a93401a5489bbd91055ca3f5a527", 
              "titleLeft": "Off", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "hidden": "", 
              "name": "", 
              "ontouchmove": "", 
              "corners": "false", 
              "script": "", 
              "expanded_pmp": true, 
              "ontouchstart": "", 
              "titleRight": "On", 
              "left": 178
            }, 
            {
              "right": "auto", 
              "cached_js": "", 
              "onclick": "", 
              "color": "red", 
              "text": " no alert", 
              "height": "auto", 
              "fontFamily": "helvetica", 
              "id": "lblAlert", 
              "borderColor": "transparent", 
              "style": "", 
              "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
              "bottom": "auto", 
              "top": 123, 
              "!type": "Label", 
              "children": [], 
              "width": 309, 
              "fontSize": 16, 
              "onmouseup": "", 
              "onmousemove": "", 
              "hidden": "", 
              "backgroundColor": "trasparente", 
              "onmouseout": "", 
              "_uuid": "656e9b142169430db6d04f3942ccd1ab", 
              "fontWeight": "bold", 
              "onmousedown": "", 
              "class": "", 
              "ontouchend": "", 
              "fontStyle": "normal", 
              "ontouchmove": "", 
              "align": "center", 
              "script": "", 
              "alignVertical": "top", 
              "expanded_pmp": true, 
              "borderWidth": 1, 
              "borderStyle": "", 
              "ontouchstart": "", 
              "left": 311
            }
          ], 
          "width": 980, 
          "action": "", 
          "setFocusID": "", 
          "method": "GET", 
          "left": 0
        }, 
        {
          "src": "js/stomp.js", 
          "cached_js_script_hash": "cb892bf0895e0f3703bad5db0745a889", 
          "cached_js": "// Generated by CoffeeScript 1.3.3\r\n(function() {\r\n  var Byte, Client, Frame, Stomp,\r\n    __hasProp = {}.hasOwnProperty;\r\n  \r\n  var MAX_FRAME_SIZE=16*1024;;\r\n  \r\n  Byte = {\r\n    LF: '\\x0A',\r\n    NULL: '\\x00'\r\n  };\r\n\r\n  Frame = (function() {\r\n\r\n    function Frame(command, headers, body) {\r\n      this.command = command;\r\n      this.headers = headers != null ? headers : {};\r\n      this.body = body != null ? body : '';\r\n    }\r\n\r\n    Frame.prototype.toString = function() {\r\n      var lines, name, value, _ref;\r\n      lines = [this.command];\r\n      _ref = this.headers;\r\n      for (name in _ref) {\r\n        if (!__hasProp.call(_ref, name)) continue;\r\n        value = _ref[name];\r\n        lines.push(\"\" + name + \":\" + value);\r\n      }\r\n      if (this.body) {\r\n        lines.push(\"content-length:\" + ('' + this.body).length);\r\n      }\r\n      lines.push(Byte.LF + this.body);\r\n      return lines.join(Byte.LF);\r\n    };\r\n\r\n    Frame._unmarshallSingle = function(data) {\r\n      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _ref, _ref1;\r\n      divider = data.search(RegExp(\"\" + Byte.LF + Byte.LF));\r\n      headerLines = data.substring(0, divider).split(Byte.LF);\r\n      command = headerLines.shift();\r\n      headers = {};\r\n      trim = function(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, '');\r\n      };\r\n      line = idx = null;\r\n      for (i = _i = 0, _ref = headerLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n        line = headerLines[i];\r\n        idx = line.indexOf(':');\r\n        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\r\n      }\r\n      body = '';\r\n      start = divider + 2;\r\n      if (headers['content-length']) {\r\n        len = parseInt(headers['content-length']);\r\n        body = ('' + data).substring(start, start + len);\r\n      } else {\r\n        chr = null;\r\n        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {\r\n          chr = data.charAt(i);\r\n          if (chr === Byte.NULL) {\r\n            break;\r\n          }\r\n          body += chr;\r\n        }\r\n      }\r\n      return new Frame(command, headers, body);\r\n    };\r\n\r\n    Frame.unmarshall = function(datas) {\r\n      var data;\r\n      return (function() {\r\n        var _i, _len, _ref, _results;\r\n        _ref = datas.split(RegExp(\"\" + Byte.NULL + Byte.LF + \"*\"));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          data = _ref[_i];\r\n          if ((data != null ? data.length : void 0) > 0) {\r\n            _results.push(Frame._unmarshallSingle(data));\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n    };\r\n\r\n    Frame.marshall = function(command, headers, body) {\r\n      var frame;\r\n      frame = new Frame(command, headers, body);\r\n      return frame.toString() + Byte.NULL;\r\n    };\r\n\r\n    return Frame;\r\n\r\n  })();\r\n\r\n  Client = (function() {\r\n\r\n    function Client(ws) {\r\n      this.ws = ws;\r\n      this.ws.binaryType = \"arraybuffer\";\r\n      this.counter = 0;\r\n      this.connected = false;\r\n      this.heartbeat = {\r\n        outgoing: 10000,\r\n        incoming: 10000\r\n      };\r\n      this.subscriptions = {};\r\n    }\r\n\r\n    Client.prototype._transmit = function(command, headers, body) {\r\n      var out;\r\n      out = Frame.marshall(command, headers, body);\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\">>> \" + out);\r\n      }\r\n      while( true) {\r\n        if( out.length > MAX_FRAME_SIZE ) {\r\n          this.ws.send(out.substring(0, MAX_FRAME_SIZE));\r\n          out = out.substring(MAX_FRAME_SIZE);\r\n        } else {\r\n          return this.ws.send(out);\r\n        }\r\n      }\r\n    };\r\n\r\n    Client.prototype._setupHeartbeat = function(headers) {\r\n      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1,\r\n        _this = this;\r\n      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {\r\n        return;\r\n      }\r\n      _ref1 = (function() {\r\n        var _i, _len, _ref1, _results;\r\n        _ref1 = headers['heart-beat'].split(\",\");\r\n        _results = [];\r\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n          v = _ref1[_i];\r\n          _results.push(parseInt(v));\r\n        }\r\n        return _results;\r\n      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];\r\n      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\r\n        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"send PING every \" + ttl + \"ms\");\r\n        }\r\n        this.pinger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          _this.ws.send(Byte.LF);\r\n          return typeof _this.debug === \"function\" ? _this.debug(\">>> PING\") : void 0;\r\n        }, ttl) : void 0;\r\n      }\r\n      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\r\n        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"check PONG every \" + ttl + \"ms\");\r\n        }\r\n        return this.ponger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          var delta;\r\n          delta = Date.now() - _this.serverActivity;\r\n          if (delta > ttl * 2) {\r\n            if (typeof _this.debug === \"function\") {\r\n              _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\r\n            }\r\n            return _this._cleanUp();\r\n          }\r\n        }, ttl) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {\r\n      var _this = this;\r\n      this.connectCallback = connectCallback;\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\"Opening Web Socket...\");\r\n      }\r\n      this.ws.onmessage = function(evt) {\r\n        var arr, c, data, frame, onreceive, _i, _len, _ref, _results;\r\n        data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === \"function\" ? _this.debug(\"--- got data length: \" + arr.length) : void 0, ((function() {\r\n          var _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n            c = arr[_i];\r\n            _results.push(String.fromCharCode(c));\r\n          }\r\n          return _results;\r\n        })()).join('')) : evt.data;\r\n        _this.serverActivity = Date.now();\r\n        if (data === Byte.LF) {\r\n          if (typeof _this.debug === \"function\") {\r\n            _this.debug(\"<<< PONG\");\r\n          }\r\n          return;\r\n        }\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(\"<<< \" + data);\r\n        }\r\n        _ref = Frame.unmarshall(data);\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          frame = _ref[_i];\r\n          switch (frame.command) {\r\n            case \"CONNECTED\":\r\n              if (typeof _this.debug === \"function\") {\r\n                _this.debug(\"connected to server \" + frame.headers.server);\r\n              }\r\n              _this.connected = true;\r\n              _this._setupHeartbeat(frame.headers);\r\n              _results.push(typeof _this.connectCallback === \"function\" ? _this.connectCallback(frame) : void 0);\r\n              break;\r\n            case \"MESSAGE\":\r\n              onreceive = _this.subscriptions[frame.headers.subscription];\r\n              _results.push(typeof onreceive === \"function\" ? onreceive(frame) : void 0);\r\n              break;\r\n            case \"RECEIPT\":\r\n              _results.push(typeof _this.onreceipt === \"function\" ? _this.onreceipt(frame) : void 0);\r\n              break;\r\n            case \"ERROR\":\r\n              _results.push(typeof errorCallback === \"function\" ? errorCallback(frame) : void 0);\r\n              break;\r\n            default:\r\n              _results.push(typeof _this.debug === \"function\" ? _this.debug(\"Unhandled frame: \" + frame) : void 0);\r\n          }\r\n        }\r\n        return _results;\r\n      };\r\n      this.ws.onclose = function() {\r\n        var msg;\r\n        msg = \"Whoops! Lost connection to \" + _this.ws.url;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(msg);\r\n        }\r\n        return typeof errorCallback === \"function\" ? errorCallback(msg) : void 0;\r\n      };\r\n      return this.ws.onopen = function() {\r\n        var headers;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug('Web Socket Opened...');\r\n        }\r\n        headers = {\r\n          \"accept-version\": Stomp.VERSIONS.supportedVersions(),\r\n          \"heart-beat\": [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',')\r\n        };\r\n        if (vhost) {\r\n          headers.host = vhost;\r\n        }\r\n        if (login) {\r\n          headers.login = login;\r\n        }\r\n        if (passcode) {\r\n          headers.passcode = passcode;\r\n        }\r\n        return _this._transmit(\"CONNECT\", headers);\r\n      };\r\n    };\r\n\r\n    Client.prototype.disconnect = function(disconnectCallback) {\r\n      this._transmit(\"DISCONNECT\");\r\n      this.ws.onclose = null;\r\n      this._cleanUp();\r\n      return typeof disconnectCallback === \"function\" ? disconnectCallback() : void 0;\r\n    };\r\n\r\n    Client.prototype._cleanUp = function() {\r\n      this.ws.close();\r\n      this.connected = false;\r\n      if (this.pinger) {\r\n        if (typeof window !== \"undefined\" && window !== null) {\r\n          window.clearInterval(this.pinger);\r\n        }\r\n      }\r\n      if (this.ponger) {\r\n        return typeof window !== \"undefined\" && window !== null ? window.clearInterval(this.ponger) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.send = function(destination, headers, body) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (body == null) {\r\n        body = '';\r\n      }\r\n      headers.destination = destination;\r\n      return this._transmit(\"SEND\", headers, body);\r\n    };\r\n\r\n    Client.prototype.subscribe = function(destination, callback, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (!headers.id) {\r\n        headers.id = \"sub-\" + this.counter++;\r\n      }\r\n      headers.destination = destination;\r\n      this.subscriptions[headers.id] = callback;\r\n      this._transmit(\"SUBSCRIBE\", headers);\r\n      return headers.id;\r\n    };\r\n\r\n    Client.prototype.unsubscribe = function(id) {\r\n      delete this.subscriptions[id];\r\n      return this._transmit(\"UNSUBSCRIBE\", {\r\n        id: id\r\n      });\r\n    };\r\n\r\n    Client.prototype.begin = function(transaction) {\r\n      return this._transmit(\"BEGIN\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.commit = function(transaction) {\r\n      return this._transmit(\"COMMIT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.abort = function(transaction) {\r\n      return this._transmit(\"ABORT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.ack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"ACK\", headers);\r\n    };\r\n\r\n    Client.prototype.nack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"NACK\", headers);\r\n    };\r\n\r\n    return Client;\r\n\r\n  })();\r\n\r\n  Stomp = {\r\n    libVersion: \"2.0.0-next\",\r\n    VERSIONS: {\r\n      V1_0: '1.0',\r\n      V1_1: '1.1',\r\n      V1_2: '1.2',\r\n      supportedVersions: function() {\r\n        return '1.1,1.0';\r\n      }\r\n    },\r\n    client: function(url, protocols) {\r\n      var klass, ws;\r\n      if (protocols == null) {\r\n        protocols = ['v10.stomp', 'v11.stomp'];\r\n      }\r\n      klass = Stomp.WebSocketClass || WebSocket;\r\n      ws = new klass(url, protocols);\r\n      return new Client(ws);\r\n    },\r\n    over: function(ws) {\r\n      return new Client(ws);\r\n    },\r\n    Frame: Frame\r\n  };\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    window.Stomp = Stomp;\r\n  } else {\r\n    exports.Stomp = Stomp;\r\n    Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;\r\n  }\r\n\r\n}).call(this);", 
          "language": "JavaScript", 
          "script": "// Generated by CoffeeScript 1.3.3\r\n(function() {\r\n  var Byte, Client, Frame, Stomp,\r\n    __hasProp = {}.hasOwnProperty;\r\n  \r\n  var MAX_FRAME_SIZE=16*1024;;\r\n  \r\n  Byte = {\r\n    LF: '\\x0A',\r\n    NULL: '\\x00'\r\n  };\r\n\r\n  Frame = (function() {\r\n\r\n    function Frame(command, headers, body) {\r\n      this.command = command;\r\n      this.headers = headers != null ? headers : {};\r\n      this.body = body != null ? body : '';\r\n    }\r\n\r\n    Frame.prototype.toString = function() {\r\n      var lines, name, value, _ref;\r\n      lines = [this.command];\r\n      _ref = this.headers;\r\n      for (name in _ref) {\r\n        if (!__hasProp.call(_ref, name)) continue;\r\n        value = _ref[name];\r\n        lines.push(\"\" + name + \":\" + value);\r\n      }\r\n      if (this.body) {\r\n        lines.push(\"content-length:\" + ('' + this.body).length);\r\n      }\r\n      lines.push(Byte.LF + this.body);\r\n      return lines.join(Byte.LF);\r\n    };\r\n\r\n    Frame._unmarshallSingle = function(data) {\r\n      var body, chr, command, divider, headerLines, headers, i, idx, len, line, start, trim, _i, _j, _ref, _ref1;\r\n      divider = data.search(RegExp(\"\" + Byte.LF + Byte.LF));\r\n      headerLines = data.substring(0, divider).split(Byte.LF);\r\n      command = headerLines.shift();\r\n      headers = {};\r\n      trim = function(str) {\r\n        return str.replace(/^\\s+|\\s+$/g, '');\r\n      };\r\n      line = idx = null;\r\n      for (i = _i = 0, _ref = headerLines.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {\r\n        line = headerLines[i];\r\n        idx = line.indexOf(':');\r\n        headers[trim(line.substring(0, idx))] = trim(line.substring(idx + 1));\r\n      }\r\n      body = '';\r\n      start = divider + 2;\r\n      if (headers['content-length']) {\r\n        len = parseInt(headers['content-length']);\r\n        body = ('' + data).substring(start, start + len);\r\n      } else {\r\n        chr = null;\r\n        for (i = _j = start, _ref1 = data.length; start <= _ref1 ? _j < _ref1 : _j > _ref1; i = start <= _ref1 ? ++_j : --_j) {\r\n          chr = data.charAt(i);\r\n          if (chr === Byte.NULL) {\r\n            break;\r\n          }\r\n          body += chr;\r\n        }\r\n      }\r\n      return new Frame(command, headers, body);\r\n    };\r\n\r\n    Frame.unmarshall = function(datas) {\r\n      var data;\r\n      return (function() {\r\n        var _i, _len, _ref, _results;\r\n        _ref = datas.split(RegExp(\"\" + Byte.NULL + Byte.LF + \"*\"));\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          data = _ref[_i];\r\n          if ((data != null ? data.length : void 0) > 0) {\r\n            _results.push(Frame._unmarshallSingle(data));\r\n          }\r\n        }\r\n        return _results;\r\n      })();\r\n    };\r\n\r\n    Frame.marshall = function(command, headers, body) {\r\n      var frame;\r\n      frame = new Frame(command, headers, body);\r\n      return frame.toString() + Byte.NULL;\r\n    };\r\n\r\n    return Frame;\r\n\r\n  })();\r\n\r\n  Client = (function() {\r\n\r\n    function Client(ws) {\r\n      this.ws = ws;\r\n      this.ws.binaryType = \"arraybuffer\";\r\n      this.counter = 0;\r\n      this.connected = false;\r\n      this.heartbeat = {\r\n        outgoing: 10000,\r\n        incoming: 10000\r\n      };\r\n      this.subscriptions = {};\r\n    }\r\n\r\n    Client.prototype._transmit = function(command, headers, body) {\r\n      var out;\r\n      out = Frame.marshall(command, headers, body);\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\">>> \" + out);\r\n      }\r\n      while( true) {\r\n        if( out.length > MAX_FRAME_SIZE ) {\r\n          this.ws.send(out.substring(0, MAX_FRAME_SIZE));\r\n          out = out.substring(MAX_FRAME_SIZE);\r\n        } else {\r\n          return this.ws.send(out);\r\n        }\r\n      }\r\n    };\r\n\r\n    Client.prototype._setupHeartbeat = function(headers) {\r\n      var serverIncoming, serverOutgoing, ttl, v, _ref, _ref1,\r\n        _this = this;\r\n      if ((_ref = headers.version) !== Stomp.VERSIONS.V1_1 && _ref !== Stomp.VERSIONS.V1_2) {\r\n        return;\r\n      }\r\n      _ref1 = (function() {\r\n        var _i, _len, _ref1, _results;\r\n        _ref1 = headers['heart-beat'].split(\",\");\r\n        _results = [];\r\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\r\n          v = _ref1[_i];\r\n          _results.push(parseInt(v));\r\n        }\r\n        return _results;\r\n      })(), serverOutgoing = _ref1[0], serverIncoming = _ref1[1];\r\n      if (!(this.heartbeat.outgoing === 0 || serverIncoming === 0)) {\r\n        ttl = Math.max(this.heartbeat.outgoing, serverIncoming);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"send PING every \" + ttl + \"ms\");\r\n        }\r\n        this.pinger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          _this.ws.send(Byte.LF);\r\n          return typeof _this.debug === \"function\" ? _this.debug(\">>> PING\") : void 0;\r\n        }, ttl) : void 0;\r\n      }\r\n      if (!(this.heartbeat.incoming === 0 || serverOutgoing === 0)) {\r\n        ttl = Math.max(this.heartbeat.incoming, serverOutgoing);\r\n        if (typeof this.debug === \"function\") {\r\n          this.debug(\"check PONG every \" + ttl + \"ms\");\r\n        }\r\n        return this.ponger = typeof window !== \"undefined\" && window !== null ? window.setInterval(function() {\r\n          var delta;\r\n          delta = Date.now() - _this.serverActivity;\r\n          if (delta > ttl * 2) {\r\n            if (typeof _this.debug === \"function\") {\r\n              _this.debug(\"did not receive server activity for the last \" + delta + \"ms\");\r\n            }\r\n            return _this._cleanUp();\r\n          }\r\n        }, ttl) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.connect = function(login, passcode, connectCallback, errorCallback, vhost) {\r\n      var _this = this;\r\n      this.connectCallback = connectCallback;\r\n      if (typeof this.debug === \"function\") {\r\n        this.debug(\"Opening Web Socket...\");\r\n      }\r\n      this.ws.onmessage = function(evt) {\r\n        var arr, c, data, frame, onreceive, _i, _len, _ref, _results;\r\n        data = typeof ArrayBuffer !== 'undefined' && evt.data instanceof ArrayBuffer ? (arr = new Uint8Array(evt.data), typeof _this.debug === \"function\" ? _this.debug(\"--- got data length: \" + arr.length) : void 0, ((function() {\r\n          var _i, _len, _results;\r\n          _results = [];\r\n          for (_i = 0, _len = arr.length; _i < _len; _i++) {\r\n            c = arr[_i];\r\n            _results.push(String.fromCharCode(c));\r\n          }\r\n          return _results;\r\n        })()).join('')) : evt.data;\r\n        _this.serverActivity = Date.now();\r\n        if (data === Byte.LF) {\r\n          if (typeof _this.debug === \"function\") {\r\n            _this.debug(\"<<< PONG\");\r\n          }\r\n          return;\r\n        }\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(\"<<< \" + data);\r\n        }\r\n        _ref = Frame.unmarshall(data);\r\n        _results = [];\r\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\r\n          frame = _ref[_i];\r\n          switch (frame.command) {\r\n            case \"CONNECTED\":\r\n              if (typeof _this.debug === \"function\") {\r\n                _this.debug(\"connected to server \" + frame.headers.server);\r\n              }\r\n              _this.connected = true;\r\n              _this._setupHeartbeat(frame.headers);\r\n              _results.push(typeof _this.connectCallback === \"function\" ? _this.connectCallback(frame) : void 0);\r\n              break;\r\n            case \"MESSAGE\":\r\n              onreceive = _this.subscriptions[frame.headers.subscription];\r\n              _results.push(typeof onreceive === \"function\" ? onreceive(frame) : void 0);\r\n              break;\r\n            case \"RECEIPT\":\r\n              _results.push(typeof _this.onreceipt === \"function\" ? _this.onreceipt(frame) : void 0);\r\n              break;\r\n            case \"ERROR\":\r\n              _results.push(typeof errorCallback === \"function\" ? errorCallback(frame) : void 0);\r\n              break;\r\n            default:\r\n              _results.push(typeof _this.debug === \"function\" ? _this.debug(\"Unhandled frame: \" + frame) : void 0);\r\n          }\r\n        }\r\n        return _results;\r\n      };\r\n      this.ws.onclose = function() {\r\n        var msg;\r\n        msg = \"Whoops! Lost connection to \" + _this.ws.url;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug(msg);\r\n        }\r\n        return typeof errorCallback === \"function\" ? errorCallback(msg) : void 0;\r\n      };\r\n      return this.ws.onopen = function() {\r\n        var headers;\r\n        if (typeof _this.debug === \"function\") {\r\n          _this.debug('Web Socket Opened...');\r\n        }\r\n        headers = {\r\n          \"accept-version\": Stomp.VERSIONS.supportedVersions(),\r\n          \"heart-beat\": [_this.heartbeat.outgoing, _this.heartbeat.incoming].join(',')\r\n        };\r\n        if (vhost) {\r\n          headers.host = vhost;\r\n        }\r\n        if (login) {\r\n          headers.login = login;\r\n        }\r\n        if (passcode) {\r\n          headers.passcode = passcode;\r\n        }\r\n        return _this._transmit(\"CONNECT\", headers);\r\n      };\r\n    };\r\n\r\n    Client.prototype.disconnect = function(disconnectCallback) {\r\n      this._transmit(\"DISCONNECT\");\r\n      this.ws.onclose = null;\r\n      this._cleanUp();\r\n      return typeof disconnectCallback === \"function\" ? disconnectCallback() : void 0;\r\n    };\r\n\r\n    Client.prototype._cleanUp = function() {\r\n      this.ws.close();\r\n      this.connected = false;\r\n      if (this.pinger) {\r\n        if (typeof window !== \"undefined\" && window !== null) {\r\n          window.clearInterval(this.pinger);\r\n        }\r\n      }\r\n      if (this.ponger) {\r\n        return typeof window !== \"undefined\" && window !== null ? window.clearInterval(this.ponger) : void 0;\r\n      }\r\n    };\r\n\r\n    Client.prototype.send = function(destination, headers, body) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (body == null) {\r\n        body = '';\r\n      }\r\n      headers.destination = destination;\r\n      return this._transmit(\"SEND\", headers, body);\r\n    };\r\n\r\n    Client.prototype.subscribe = function(destination, callback, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      if (!headers.id) {\r\n        headers.id = \"sub-\" + this.counter++;\r\n      }\r\n      headers.destination = destination;\r\n      this.subscriptions[headers.id] = callback;\r\n      this._transmit(\"SUBSCRIBE\", headers);\r\n      return headers.id;\r\n    };\r\n\r\n    Client.prototype.unsubscribe = function(id) {\r\n      delete this.subscriptions[id];\r\n      return this._transmit(\"UNSUBSCRIBE\", {\r\n        id: id\r\n      });\r\n    };\r\n\r\n    Client.prototype.begin = function(transaction) {\r\n      return this._transmit(\"BEGIN\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.commit = function(transaction) {\r\n      return this._transmit(\"COMMIT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.abort = function(transaction) {\r\n      return this._transmit(\"ABORT\", {\r\n        transaction: transaction\r\n      });\r\n    };\r\n\r\n    Client.prototype.ack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"ACK\", headers);\r\n    };\r\n\r\n    Client.prototype.nack = function(messageID, subscription, headers) {\r\n      if (headers == null) {\r\n        headers = {};\r\n      }\r\n      headers[\"message-id\"] = messageID;\r\n      headers.subscription = subscription;\r\n      return this._transmit(\"NACK\", headers);\r\n    };\r\n\r\n    return Client;\r\n\r\n  })();\r\n\r\n  Stomp = {\r\n    libVersion: \"2.0.0-next\",\r\n    VERSIONS: {\r\n      V1_0: '1.0',\r\n      V1_1: '1.1',\r\n      V1_2: '1.2',\r\n      supportedVersions: function() {\r\n        return '1.1,1.0';\r\n      }\r\n    },\r\n    client: function(url, protocols) {\r\n      var klass, ws;\r\n      if (protocols == null) {\r\n        protocols = ['v10.stomp', 'v11.stomp'];\r\n      }\r\n      klass = Stomp.WebSocketClass || WebSocket;\r\n      ws = new klass(url, protocols);\r\n      return new Client(ws);\r\n    },\r\n    over: function(ws) {\r\n      return new Client(ws);\r\n    },\r\n    Frame: Frame\r\n  };\r\n\r\n  if (typeof window !== \"undefined\" && window !== null) {\r\n    window.Stomp = Stomp;\r\n  } else {\r\n    exports.Stomp = Stomp;\r\n    Stomp.WebSocketClass = require('./test/server.mock.js').StompServerMock;\r\n  }\r\n\r\n}).call(this);", 
          "_uuid": "3d5f175b1bb84a84b8d1bf52630b7162", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "stomp.js", 
          "children": []
        }, 
        {
          "src": "img/logoCSI.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "620652be945e40f3afec4e9674d276c0", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "logoCSI.png", 
          "children": []
        }, 
        {
          "src": "img/logosdp.jpg", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "3c8b487fd66a43048e8f6f2491cd7f70", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "logosdp.jpg", 
          "children": []
        }, 
        {
          "src": "img/1.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "74ed804959a44b5fb5ab52b746c122bd", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "1.png", 
          "children": []
        }, 
        {
          "src": "img/2.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "d3ff4339a05f4895a0944e4d9c40ba0e", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "2.png", 
          "children": []
        }, 
        {
          "src": "img/3.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "091a0a7e7c554a74aeedd03ff0b93bbe", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "3.png", 
          "children": []
        }, 
        {
          "src": "img/4.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "e9b3c2602ea74ef29a47d47711711b6f", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "4.png", 
          "children": []
        }, 
        {
          "src": "img/5.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "e21effba406346e28a4a7115cd94c0a5", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "5.png", 
          "children": []
        }, 
        {
          "src": "img/1x.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "fb0d6899eada489f88248a005b11cb16", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "1x.png", 
          "children": []
        }, 
        {
          "src": "img/2x.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "84a2a4a76bde426f9a91df5a43af31cd", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "2x.png", 
          "children": []
        }, 
        {
          "src": "img/3x.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "08b07c265fa94ad69fdcb4c875fe3e17", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "3x.png", 
          "children": []
        }, 
        {
          "src": "img/5x.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "693bb38092de4f9bbae2778b94ad4569", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "5x.png", 
          "children": []
        }, 
        {
          "src": "img/4x.png", 
          "cached_js_script_hash": "314f1b2e5ef826dd9c56396c422c7cdf", 
          "cached_js": "", 
          "language": "Other", 
          "script": "Contenuto binario. Non modificabile.", 
          "_uuid": "e932f47dde7f40fe91370f5712303fa5", 
          "!type": "Code", 
          "expanded_pmp": true, 
          "id": "4x.png", 
          "children": []
        }
      ], 
      "description": "", 
      "extraheaders": "", 
      "onvisibilitychange": "", 
      "_uuid": "e6905da4c4c54b679f126ee10311b746", 
      "backgroundimage": "", 
      "phoneGapVersion": "", 
      "ondeviceorientation": "", 
      "icon": "nsb/images/LauncherIcon57.png", 
      "homescreenTitle": "", 
      "language": "BASIC", 
      "configxml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<widget \nxmlns = \"http://www.w3.org/ns/widgets\"\nxmlns:gap = \"http://phonegap.com/ns/1.0\"\nid = \"com.nsbasic.{id}\"\nversion = \"{version}\">\n\n<name>{title}</name>\n<description>{description}</description>\n<preference name=\"phonegap-version\" value=\"3.4.0\" />\n\n<!--\n<preference name=\"SplashScreenDelay\" value=\"2000\" />\n<gap:splash src=\"{splashscreen}\"/>\n<gap:splash src='splash/ios/Default.png' gap:platform='ios' width='320' height='480' />\n<gap:splash src='splash/ios/Default@2x.png' gap:platform='ios' width='640' height='960' />\n<gap:splash src='splash/ios/Default-568h@2x.png' gap:platform='ios' width='640' height='1136'\n<gap:splash src='splash/ios/Default-Portrait.png' gap:platform='ios' width='768' height='1024' />\n<gap:splash src='splash/ios/Default-Landscape.png' gap:platform='ios' width='1024' height='768' />\n<gap:splash src='splash/ios/Default-Portrait@2x.png' gap:platform='ios' width='1536' height='2048' />\n<gap:splash src='splash/ios/Default-Landscape@2x.png' gap:platform='ios' width='2048' height='1536' />\n-->\n<!-- Icons: Expand this section with sizes required for platforms you are targeting.-->\n<icon src=\"{icon}\" />\n<!--\n<icon src=\"icons/ios/icon.png\" gap:platform=\"ios\" width=\"57\" height=\"57\" />\n<icon src=\"icons/ios/icon-72.png\" gap:platform=\"ios\" width=\"72\" height=\"72\" />\n<icon src=\"icons/ios/icon_at_2x.png\" gap:platform=\"ios\" width=\"114\" height=\"114\" />\n<icon src=\"icons/ios/icon-72_at_2x.png\" gap:platform=\"ios\" width=\"144\" height=\"144\" />\n<icon src=\"icons/android/ldpi.png\" gap:platform=\"android\" gap:density=\"ldpi\" />\n<icon src=\"icons/android/mdpi.png\" gap:platform=\"android\" gap:density=\"mdpi\" />\n<icon src=\"icons/android/hdpi.png\" gap:platform=\"android\" gap:density=\"hdpi\" />\n<icon src=\"icons/android/xhdpi.png\" gap:platform=\"android\" gap:density=\"xhdpi\" />\n-->\n\n<!-- sample feature specification -->\n<!-- <feature name=\"http://api.phonegap.com/1.0/network\"/> -->\n\n<preference name=\"permissions\" value=\"none\"/>\n<!-- sample preference specifications -->\n<!-- <preference name=\"autorotate\" value=\"false\" readonly=\"true\"/> -->\n<!-- <preference name=\"orientation\" value=\"default\" /> -->\n<!-- <preference name=\"fullscreen\" value=\"true\" /> -->\n\n<!-- Platforms: Customize as needed. -->\n<gap:platforms>\n   <gap:platform name=\"android\" minVersion=\"2.3\" />\n   <gap:platform name=\"ios\" />\n   <gap:platform name=\"winphone\" />\n</gap:platforms>\n</widget>", 
      "title": "Smart Trek Visualizer", 
      "phoneGapLanguages": "en", 
      "defaultformsize": "1080x800", 
      "_dbfiles": [], 
      "manifest": "", 
      "statusbar": "black-translucent", 
      "minimalUI": ", minimal-ui", 
      "onorientationchange": "", 
      "splashscreen": "nsb/images/SplashScreen.png", 
      "hiddenheaders": ""
    }
  ], 
  "deploy_userName": "", 
  "deploy_global": true, 
  "cached_js": "", 
  "deploy_user": false, 
  "_uuid": "836c4624c626445782527b69b0d1d93a", 
  "_old_pal": false, 
  "deploy_port": "21", 
  "deploy_password": "", 
  "_tempdir": "/var/folders/15/1kq2pwn16dlgtkg00lxc10_40000gn/T/tmpHjX5Pw", 
  "deploy_localPath": "", 
  "deploy_path": "", 
  "phonegap_auth_token": "", 
  "id": "", 
  "deploy_protocol": "ftp", 
  "deploy_server": "", 
  "phonegap_password": "", 
  "cached_js_script_hash": "d41d8cd98f00b204e9800998ecf8427e", 
  "script": "", 
  "deploy_local": false, 
  "phonegap_email": "", 
  "!type": "Project", 
  "expanded_pmp": true, 
  "filename": "", 
  "libraries": [], 
  "_sample": false, 
  "version": 4, 
  "language_version": 7
}